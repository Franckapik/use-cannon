import I, { useState as B, useRef as F, useEffect as g, useMemo as b } from 'react'
import { _ as G, c as Q } from './index-dbdc60ee.js'
import 'three'
import { useThree as C } from 'react-three-fiber'
function U(I, B, F) {
  var g = void 0 === B ? null : B,
    b = (function (I, B) {
      var F = atob(I)
      if (B) {
        for (var g = new Uint8Array(F.length), b = 0, G = F.length; b < G; ++b) g[b] = F.charCodeAt(b)
        return String.fromCharCode.apply(null, new Uint16Array(g.buffer))
      }
      return F
    })(I, void 0 !== F && F),
    G = b.indexOf('\n', 10) + 1,
    Q = b.substring(G) + (g ? '//# sourceMappingURL=' + g : ''),
    C = new Blob([Q], { type: 'application/javascript' })
  return URL.createObjectURL(C)
}
var c,
  l,
  V,
  d,
  Z =
    ((c =
      '/* rollup-plugin-web-worker-loader */
function t(){return(t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t}).apply(this,arguments)}function e(t,e){if(null==t)return{};var s,i,o={},n=Object.keys(t);for(i=0;i<n.length;i++)s=n[i],e.indexOf(s)>=0||(o[s]=t[s]);return o}class s{constructor(t=[0,0,0,0,0,0,0,0,0]){this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t=new i){const e=this.elements;t.x=e[0],t.y=e[4],t.z=e[8]}vmult(t,e=new i){const s=this.elements,o=t.x,n=t.y,r=t.z;return e.x=s[0]*o+s[1]*n+s[2]*r,e.y=s[3]*o+s[4]*n+s[5]*r,e.z=s[6]*o+s[7]*n+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e=new s){const{elements:i}=t;for(let t=0;t<3;t++)for(let s=0;s<3;s++){let o=0;for(let e=0;e<3;e++)o+=i[t+3*e]*this.elements[e+3*s];e.elements[t+3*s]=o}return e}scale(t,e=new s){const i=this.elements,o=e.elements;for(let e=0;3!==e;e++)o[3*e+0]=t.x*i[3*e+0],o[3*e+1]=t.y*i[3*e+1],o[3*e+2]=t.z*i[3*e+2];return e}solve(t,e=new i){const s=[];let o,n;for(o=0;o<12;o++)s.push(0);for(o=0;o<3;o++)for(n=0;n<3;n++)s[o+4*n]=this.elements[o+3*n];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l;let c;do{if(o=a-r,0===s[o+4*o])for(n=o+1;n<a;n++)if(0!==s[o+4*n]){l=4;do{c=4-l,s[c+4*o]+=s[c+4*n]}while(--l);break}if(0!==s[o+4*o])for(n=o+1;n<a;n++){const t=s[o+4*n]/s[o+4*o];l=4;do{c=4-l,s[c+4*n]=c<=o?0:s[c+4*n]-s[c+4*o]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw"Could not solve equation! Got x=["+e.toString()+"], b=["+t.toString()+"], A=["+this.toString()+"]";return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t=new s){const e=[];let i,o;for(i=0;i<18;i++)e.push(0);for(i=0;i<3;i++)for(o=0;o<3;o++)e[i+6*o]=this.elements[i+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let n=3;const r=n;let a;let l;do{if(i=r-n,0===e[i+6*i])for(o=i+1;o<r;o++)if(0!==e[i+6*o]){a=6;do{l=6-a,e[l+6*i]+=e[l+6*o]}while(--a);break}if(0!==e[i+6*i])for(o=i+1;o<r;o++){const t=e[i+6*o]/e[i+6*i];a=6;do{l=6-a,e[l+6*o]=l<=i?0:e[l+6*o]-e[l+6*i]*t}while(--a)}}while(--n);i=2;do{o=i-1;do{const t=e[i+6*o]/e[i+6*i];a=6;do{l=6-a,e[l+6*o]=e[l+6*o]-e[l+6*i]*t}while(--a)}while(o--)}while(--i);i=2;do{const t=1/e[i+6*i];a=6;do{l=6-a,e[l+6*i]=e[l+6*i]*t}while(--a)}while(i--);i=2;do{o=2;do{if(l=e[3+o+6*i],isNaN(l)||l===1/0)throw"Could not reverse! A=["+this.toString()+"]";t.e(i,o,l)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,c=e*r,h=e*a,u=s*r,d=s*a,p=i*a,y=o*n,m=o*r,v=o*a,w=this.elements;return w[0]=1-(u+p),w[1]=c-v,w[2]=h+m,w[3]=c+v,w[4]=1-(l+p),w[5]=d-y,w[6]=h-m,w[7]=d+y,w[8]=1-(l+u),this}transpose(t=new s){const e=t.elements,i=this.elements;for(let t=0;3!==t;t++)for(let s=0;3!==s;s++)e[3*t+s]=i[3*s+t];return t}}class i{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}cross(t,e=new i){const s=t.x,o=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*o,e.y=l*s-r*n,e.z=r*o-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new i(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new i(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new s([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t=new i){const e=this.x,s=this.y,o=this.z;let n=Math.sqrt(e*e+s*s+o*o);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=o*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e=new i){const s=this.x,o=this.y,n=this.z;return e.x=t*s,e.y=t*o,e.z=t*n,e}vmul(t,e=new i){return e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s=new i){return s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t=new i){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=o,r=1/s;i.set(this.x*r,this.y*r,this.z*r);const a=n;Math.abs(i.x)<.9?(a.set(1,0,0),i.cross(a,t)):(a.set(0,1,0),i.cross(a,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return this.x+","+this.y+","+this.z}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e=1e-6){return!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t=1e-6){return!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(r),r.almostEquals(t,e)}clone(){return new i(this.x,this.y,this.z)}}i.ZERO=new i(0,0,0),i.UNIT_X=new i(1,0,0),i.UNIT_Y=new i(0,1,0),i.UNIT_Z=new i(0,0,1);const o=new i,n=new i,r=new i;class a{constructor(t={}){this.lowerBound=new i,this.upperBound=new i,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,l),s=l),s.x>n.x&&(n.x=s.x),s.x<o.x&&(o.x=s.x),s.y>n.y&&(n.y=s.y),s.y<o.y&&(o.y=s.y),s.z>n.z&&(n.z=s.z),s.z<o.z&&(o.z=s.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new a).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,c=this.upperBound;t.copy(l),e.set(c.x,l.y,l.z),s.set(c.x,c.y,l.z),i.set(l.x,c.y,c.z),o.set(c.x,l.y,c.z),n.set(l.x,c.y,l.z),r.set(l.x,l.y,c.z),a.copy(c)}toLocalFrame(t,e){const s=c,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,h,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=c,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,h,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,c=(this.upperBound.y-s.y)*o,h=(this.lowerBound.z-s.z)*n,u=(this.upperBound.z-s.z)*n,d=Math.max(Math.max(Math.min(r,a),Math.min(l,c)),Math.min(h,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,c)),Math.max(h,u));return!(p<0)&&!(d>p)}}const l=new i,c=[new i,new i,new i,new i,new i,new i,new i,new i];class h{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const t=o;o=i,i=t}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class u{constructor(){}addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class d{constructor(t=0,e=0,s=0,i=1){this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return this.x+","+this.y+","+this.z+","+this.w}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t=new i){this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=p,s=y;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e=new d){const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,c=t.w;return e.x=s*c+n*r+i*l-o*a,e.y=i*c+n*a+o*r-s*l,e.z=o*c+n*l+s*a-i*r,e.w=n*c-s*r-i*a-o*l,e}inverse(t=new d){const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t=new d){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e=new i){const s=t.x,o=t.y,n=t.z,r=this.x,a=this.y,l=this.z,c=this.w,h=c*s+a*n-l*o,u=c*o+l*s-r*n,d=c*n+r*o-a*s,p=-r*s-a*o-l*n;return e.x=h*c+p*-r+u*-l-d*-a,e.y=u*c+p*-a+d*-r-h*-l,e.z=d*c+p*-l+h*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e="YZX"){let s,i,o;const n=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const t=n*r+a*l;if(t>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),t<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),void 0===s){const e=n*n,c=r*r,h=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*c-2*h),i=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*h)}break;default:throw new Error("Euler order "+e+" not supported yet.")}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i="XYZ"){const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),c=Math.sin(s/2);return"XYZ"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):"YXZ"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):"ZXY"===i?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r-a*l*c):"ZYX"===i?(this.x=a*n*r-o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r+a*l*c):"YZX"===i?(this.x=a*n*r+o*l*c,this.y=o*l*r+a*n*c,this.z=o*n*c-a*l*r,this.w=o*n*r-a*l*c):"XZY"===i&&(this.x=a*n*r-o*l*c,this.y=o*l*r-a*n*c,this.z=o*n*c+a*l*r,this.w=o*n*r+a*l*c),this}clone(){return new d(this.x,this.y,this.z,this.w)}slerp(t,e,s=new d){const i=this.x,o=this.y,n=this.z,r=this.w;let a,l,c,h,u,p=t.x,y=t.y,m=t.z,v=t.w;return l=i*p+o*y+n*m+r*v,l<0&&(l=-l,p=-p,y=-y,m=-m,v=-v),1-l>1e-6?(a=Math.acos(l),c=Math.sin(a),h=Math.sin((1-e)*a)/c,u=Math.sin(e*a)/c):(h=1-e,u=e),s.x=h*i+u*p,s.y=h*o+u*y,s.z=h*n+u*m,s.w=h*r+u*v,s}integrate(t,e,s,i=new d){const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,c=this.z,h=this.w,u=.5*e;return i.x+=u*(o*h+n*c-r*l),i.y+=u*(n*h+r*a-o*c),i.z+=u*(r*h+o*l-n*a),i.w+=u*(-o*a-n*l-r*c),i}}const p=new i,y=new i;class m{constructor(t={}){this.id=m.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw"computeBoundingSphereRadius() not implemented for shape type "+this.type}volume(){throw"volume() not implemented for shape type "+this.type}calculateLocalInertia(t,e){throw"calculateLocalInertia() not implemented for shape type "+this.type}calculateWorldAABB(t,e,s,i){throw"calculateWorldAABB() not implemented for shape type "+this.type}}m.idCounter=0,m.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class v{constructor(t={}){this.position=new i,this.quaternion=new d,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return v.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return v.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,o=new i){return s.vsub(t,o),e.conjugate(w),w.vmult(o,o),o}static pointToWorldFrame(t,e,s,o=new i){return e.vmult(s,o),o.vadd(t,o),o}static vectorToWorldFrame(t,e,s=new i){return t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,o=new i){return e.w*=-1,e.vmult(s,o),e.w*=-1,o}}const w=new d;class f extends m{constructor(t={}){const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:m.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const o=new i;for(let i=0;i!==t.length;i++){const n=t[i],r=n.length;for(let t=0;t!==r;t++){const i=(t+1)%r;e[n[t]].vsub(e[n[i]],o),o.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(o)||s[t].almostEquals(o)){a=!0;break}a||s.push(o.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error("Vertex "+this.faces[t][e]+" not found!");const e=this.faceNormals[t]||new i;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(".faceNormals["+t+"] = Vec3("+e.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");for(let e=0;e<this.faces[t].length;e++)console.warn(".vertices["+this.faces[t][e]+"] = Vec3("+this.vertices[this.faces[t][e]].toString()+")")}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];f.computeNormal(i,o,n,e)}clipAgainstHull(t,e,s,o,n,r,a,l,c){const h=new i;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){h.copy(s.faceNormals[t]),n.vmult(h,h);const e=h.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<s.faces[u].length;t++){const e=s.vertices[s.faces[u][t]],r=new i;r.copy(e),n.vmult(r,r),o.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,c)}findSeparatingAxis(t,e,s,o,n,r,a,l){const c=new i,h=new i,u=new i,d=new i,p=new i,y=new i;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let i=0;i!==v.uniqueAxes.length;i++){s.vmult(v.uniqueAxes[i],c);const a=v.testSepAxis(c,t,e,s,o,n);if(!1===a)return!1;a<m&&(m=a,r.copy(c))}else{const i=a?a.length:v.faces.length;for(let l=0;l<i;l++){const i=a?a[l]:l;c.copy(v.faceNormals[i]),s.vmult(c,c);const h=v.testSepAxis(c,t,e,s,o,n);if(!1===h)return!1;h<m&&(m=h,r.copy(c))}}if(t.uniqueAxes)for(let i=0;i!==t.uniqueAxes.length;i++){n.vmult(t.uniqueAxes[i],h);const a=v.testSepAxis(h,t,e,s,o,n);if(!1===a)return!1;a<m&&(m=a,r.copy(h))}else{const i=l?l.length:t.faces.length;for(let a=0;a<i;a++){const i=l?l[a]:a;h.copy(t.faceNormals[i]),n.vmult(h,h);const c=v.testSepAxis(h,t,e,s,o,n);if(!1===c)return!1;c<m&&(m=c,r.copy(h))}}for(let i=0;i!==v.uniqueEdges.length;i++){s.vmult(v.uniqueEdges[i],d);for(let i=0;i!==t.uniqueEdges.length;i++)if(n.vmult(t.uniqueEdges[i],p),d.cross(p,y),!y.almostZero()){y.normalize();const i=v.testSepAxis(y,t,e,s,o,n);if(!1===i)return!1;i<m&&(m=i,r.copy(y))}}return o.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,i,o,n){f.project(this,t,s,i,g),f.project(e,t,o,n,x);const r=g[0],a=g[1],l=x[0],c=x[1];if(r<c||l<a)return!1;const h=r-c,u=l-a;return h<u?h:u}calculateLocalInertia(t,e){const s=new i,o=new i;this.computeLocalAABB(o,s);const n=s.x-o.x,r=s.y-o.y,a=s.z-o.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,o,n,r,a){const l=new i,c=new i,h=new i,u=new i,d=new i,p=new i,y=new i,m=new i,v=this,w=o,f=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<v.faces.length;e++){l.copy(v.faceNormals[e]),s.vmult(l,l);const i=l.dot(t);i<x&&(x=i,g=e)}if(g<0)return;const b=v.faces[g];b.connectedFaces=[];for(let t=0;t<v.faces.length;t++)for(let e=0;e<v.faces[t].length;e++)-1!==b.indexOf(v.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const A=b.length;for(let t=0;t<A;t++){const i=v.vertices[b[t]],o=v.vertices[b[(t+1)%A]];i.vsub(o,c),h.copy(c),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),p.copy(i),s.vmult(p,p),e.vadd(p,p);const n=b.connectedFaces[t];y.copy(this.faceNormals[n]);const r=this.getPlaneConstantOfFace(n);m.copy(y),s.vmult(m,m);const a=r-m.dot(e);for(this.clipFaceAgainstPlane(w,f,m,a);w.length;)w.shift();for(;f.length;)w.push(f.shift())}y.copy(this.faceNormals[g]);const B=this.getPlaneConstantOfFace(g);m.copy(y),s.vmult(m,m);const E=B-m.dot(e);for(let t=0;t<w.length;t++){let e=m.dot(w[t])+E;if(e<=n&&(console.log("clamped: depth="+e+" to minDist="+n),e=n),e<=r){const s=w[t];if(e<=1e-6){const t={point:s,normal:m,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,s,o){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],c=t[0];n=s.dot(l)+o;for(let h=0;h<a;h++){if(c=t[h],r=s.dot(c)+o,n<0)if(r<0){const t=new i;t.copy(c),e.push(t)}else{const t=new i;l.lerp(c,n/(n-r),t),e.push(t)}else if(r<0){const t=new i;l.lerp(c,n/(n-r),t),e.push(t),e.push(c)}l=c,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new i);const s=this.vertices,o=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],o[i]),t.vadd(o[i],o[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new i);const s=this.faceNormals,o=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],o[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,o){const n=this.vertices;let r,a,l,c,h,u,d=new i;for(let s=0;s<n.length;s++){d.copy(n[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===c||i.x>c)&&(c=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===h||i.y>h)&&(h=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}s.set(r,a,l),o.set(c,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t=new i){const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,o=this.faceNormals,n=new i;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=o[r];const l=e[s[r][0]],c=new i;t.vsub(l,c);const h=a.dot(c),u=new i;n.vsub(l,u);const d=a.dot(u);if(h<0&&d>0||h>0&&d<0)return!1}return-1}}f.computeNormal=(t,e,s,o)=>{const n=new i,r=new i;e.vsub(t,r),s.vsub(e,n),n.cross(r,o),o.isZero()||o.normalize()};const g=[],x=[];f.project=(t,e,s,o,n)=>{const r=t.vertices.length,a=new i;let l=0,c=0;const h=new i,u=t.vertices;h.setZero(),v.vectorToLocalFrame(s,o,e,a),v.pointToLocalFrame(s,o,h,h);const d=h.dot(a);c=l=u[0].dot(a);for(let t=1;t<r;t++){const e=u[t].dot(a);e>l&&(l=e),e<c&&(c=e)}if(c-=d,l-=d,c>l){const t=c;c=l,l=t}n[0]=l,n[1]=c};class b extends m{constructor(t){super({type:m.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,o=i,n=[new o(-t,-e,-s),new o(t,-e,-s),new o(t,e,-s),new o(-t,e,-s),new o(-t,-e,s),new o(t,-e,s),new o(t,e,s),new o(-t,e,s)],r=[new o(0,0,1),new o(0,1,0),new o(1,0,0)],a=new f({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e=new i){return b.calculateInertia(this.halfExtents,t,e),e}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<o.length;i++)A.set(o[i][0],o[i][1],o[i][2]),e.vmult(A,A),t.vadd(A,A),s(A.x,A.y,A.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;B[0].set(o.x,o.y,o.z),B[1].set(-o.x,o.y,o.z),B[2].set(-o.x,-o.y,o.z),B[3].set(-o.x,-o.y,-o.z),B[4].set(o.x,-o.y,-o.z),B[5].set(o.x,o.y,-o.z),B[6].set(-o.x,o.y,-o.z),B[7].set(o.x,-o.y,o.z);const n=B[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let o=1;o<8;o++){const n=B[o];e.vmult(n,n),t.vadd(n,n);const r=n.x,a=n.y,l=n.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}b.calculateInertia=(t,e,s)=>{const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)};const A=new i,B=[new i,new i,new i,new i,new i,new i,new i,new i],E=0,S=1,z=2;class F extends u{constructor(t={}){super(),this.id=F.idCounter++,this.index=-1,this.world=null,this.preStep=null,this.postStep=null,this.vlambda=new i,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new i,this.previousPosition=new i,this.interpolatedPosition=new i,this.initPosition=new i,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new i,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new i,this.force=new i;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?F.STATIC:F.DYNAMIC,typeof t.type==typeof F.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=0,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new i,this.quaternion=new d,this.initQuaternion=new d,this.previousQuaternion=new d,this.interpolatedQuaternion=new d,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new i,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new i,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new i,this.invInertia=new i,this.invInertiaWorld=new s,this.invMassSolve=0,this.invInertiaSolve=new i,this.invInertiaWorldSolve=new s,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new i(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new i(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new a,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new i,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=0,this.wakeUpAfterNarrowphase=!1,t===F.SLEEPING&&this.dispatchEvent(F.wakeupEvent)}sleep(){this.sleepState=F.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===F.AWAKE&&s<i?(this.sleepState=F.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(F.sleepyEvent)):e===F.SLEEPY&&s>i?this.wakeUp():e===F.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(F.sleepEvent))}}updateSolveMassProperties(){this.sleepState===F.SLEEPING||this.type===F.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e=new i){return t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e=new i){return this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e}addShape(t,e,s){const o=new i,n=new d;return e&&o.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(o),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const s=t[o];s.updateBoundingSphereRadius();const n=e[o].length(),r=s.boundingSphereRadius;n+r>i&&(i=n+r)}this.boundingRadius=i}computeAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=C,n=M,r=this.quaternion,a=this.aabb,l=R;for(let c=0;c!==i;c++){const i=t[c];r.vmult(e[c],o),o.vadd(this.position,o),r.mult(s[c],n),i.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===c?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=I,s=T;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(this.type!==F.DYNAMIC)return;const s=q;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(this.type!==F.DYNAMIC)return;const s=L,i=P;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyImpulse(t,e){if(this.type!==F.DYNAMIC)return;const s=e,i=N;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=W;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(this.type!==F.DYNAMIC)return;const s=V,i=k;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=j;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.computeAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),b.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new i;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==F.DYNAMIC&&this.type!==F.KINEMATIC||this.sleepState===F.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,c=this.invMass,h=this.invInertiaWorld,u=this.linearFactor,d=c*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=h.elements,y=this.angularFactor,m=a.x*y.x,v=a.y*y.y,w=a.z*y.z;o.x+=t*(p[0]*m+p[1]*v+p[2]*w),o.y+=t*(p[3]*m+p[4]*v+p[5]*w),o.z+=t*(p[6]*m+p[7]*v+p[8]*w),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}F.COLLIDE_EVENT_NAME="collide",F.DYNAMIC=1,F.STATIC=2,F.KINEMATIC=4,F.AWAKE=E,F.SLEEPY=S,F.SLEEPING=z,F.idCounter=0,F.wakeupEvent={type:"wakeup"},F.sleepyEvent={type:"sleepy"},F.sleepEvent={type:"sleep"};const C=new i,M=new d,R=new a,I=new s,T=new s,q=new i,L=new i,P=new i,N=new i,W=new i,V=new i,k=new i,j=new i;class O{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&F.STATIC)&&t.sleepState!==F.SLEEPING||0==(e.type&F.STATIC)&&e.sleepState!==F.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=_;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.computeAABB(),e.aabbNeedsUpdate&&e.computeAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=U,i=H,o=D,n=t.length;for(let s=0;s!==n;s++)i[s]=t[s],o[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==n;t++){const e=i[t].id,n=o[t].id,r=e<n?e+","+n:n+","+e;s[r]=t,s.keys.push(r)}for(let n=0;n!==s.keys.length;n++){const n=s.keys.pop(),r=s[n];t.push(i[r]),e.push(o[r]),delete s[n]}}setWorld(t){}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const _=new i,U={keys:[]},H=[],D=[];O.boundingSphereCheck=(t,e)=>{const s=new i;t.position.vsub(e.position,s);const o=t.shapes[0],n=e.shapes[0];return Math.pow(o.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()};class G extends O{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let t=0;t!==o;t++)for(let o=0;o!==t;o++)n=i[t],r=i[o],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s=[]){for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.computeAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class X{constructor(){this.rayFromWorld=new i,this.rayToWorld=new i,this.hitNormalWorld=new i,this.hitPointWorld=new i,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}class Y{constructor(t=new i,e=new i){this.from=t.clone(),this.to=e.clone(),this.direction=new i,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new X,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new X,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Z),K.length=0,t.broadphase.aabbQuery(t,Z,K),this.intersectBodies(K),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const i=tt,o=et;for(let e=0,n=t.shapes.length;e<n;e++){const n=t.shapes[e];if((!s||n.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],o),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(n,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){if(function(t,e,s){s.vsub(t,At);const i=At.dot(e);e.scale(i,Bt),Bt.vadd(t,Bt);return s.distanceTo(Bt)}(this.from,this.direction,s)>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,o,n){const r=this.from,a=this.to,l=this.direction,c=new i(0,0,1);e.vmult(c,c);const h=new i;r.vsub(s,h);const u=h.dot(c);a.vsub(s,h);if(u*h.dot(c)>0)return;if(r.distanceTo(a)<u)return;const d=c.dot(l);if(Math.abs(d)<this.precision)return;const p=new i,y=new i,m=new i;r.vsub(s,p);const v=-c.dot(p)/d;l.scale(v,y),r.vadd(y,m),this.reportIntersection(c,m,n,o,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=lt;n.from.copy(this.from),n.to.copy(this.to),v.pointToLocalFrame(s,e,n.from,n.from),v.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=ct;let l,c,h,u;l=c=0,h=u=t.data.length-1;const d=new a;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),l=Math.max(l,r[0]),c=Math.max(c,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let r=l;r<h;r++)for(let a=c;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(r,a,!1),v.pointToWorldFrame(s,e,t.pillarOffset,at),this._intersectConvex(t.pillarConvex,e,at,i,o,rt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),v.pointToWorldFrame(s,e,t.pillarOffset,at),this._intersectConvex(t.pillarConvex,e,at,i,o,rt)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,c=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),h=c**2-4*l*((n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2),u=ht,d=ut;if(!(h<0))if(0===h)n.lerp(r,h,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1);else{const t=(-c-Math.sqrt(h))/(2*l),e=(-c+Math.sqrt(h))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=dt,a=pt,l=n&&n.faceList||null,c=t.faces,h=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,m=p.distanceTo(y),v=l?l.length:c.length,w=this.result;for(let t=0;!w.shouldStop&&t<v;t++){const n=l?l[t]:t,y=c[n],v=u[n],f=e,g=s;a.copy(h[y[0]]),f.vmult(a,a),a.vadd(g,a),a.vsub(p,a),f.vmult(v,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,st),st.vadd(p,st),it.copy(h[y[0]]),f.vmult(it,it),g.vadd(it,it);for(let t=1;!w.shouldStop&&t<y.length-1;t++){ot.copy(h[y[t]]),nt.copy(h[y[t+1]]),f.vmult(ot,ot),f.vmult(nt,nt),g.vadd(ot,ot),g.vadd(nt,nt);const e=st.distanceTo(p);!$(st,it,ot,nt)&&!$(st,ot,it,nt)||e>m||this.reportIntersection(r,st,o,i,n)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=yt,a=xt,l=bt,c=pt,h=mt,u=vt,d=wt,p=gt,y=ft,m=(n&&n.faceList,t.indices),w=(t.vertices,this.from),f=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),v.vectorToLocalFrame(s,e,g,h),v.pointToLocalFrame(s,e,w,u),v.pointToLocalFrame(s,e,f,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,h),h.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let n=0,l=a.length;!this.result.shouldStop&&n!==l;n++){const l=a[n];t.getNormal(l,r),t.getVertex(m[3*l],it),it.vsub(u,c);const d=h.dot(r),w=r.dot(c)/d;if(w<0)continue;h.scale(w,st),st.vadd(u,st),t.getVertex(m[3*l+1],ot),t.getVertex(m[3*l+2],nt);const f=st.distanceSquared(u);!$(st,ot,it,nt)&&!$(st,it,ot,nt)||f>x||(v.vectorToWorldFrame(e,r,y),v.pointToWorldFrame(s,e,st,p),this.reportIntersection(y,p,o,i,l))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==o?o:-1,this.mode){case Y.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case Y.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case Y.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0}}}Y.CLOSEST=1,Y.ANY=2,Y.ALL=4;const Z=new a,K=[],Q=new i,J=new i;function $(t,e,s,i){i.vsub(e,At),s.vsub(e,Q),t.vsub(e,J);const o=At.dot(At),n=At.dot(Q),r=At.dot(J),a=Q.dot(Q),l=Q.dot(J);let c,h;return(c=a*r-n*l)>=0&&(h=o*l-n*r)>=0&&c+h<o*a-n*n}Y.pointInTriangle=$;const tt=new i,et=new d,st=new i,it=new i,ot=new i,nt=new i;Y.prototype[m.types.BOX]=Y.prototype._intersectBox,Y.prototype[m.types.PLANE]=Y.prototype._intersectPlane;const rt={faceList:[0]},at=new i,lt=new Y,ct=[];Y.prototype[m.types.HEIGHTFIELD]=Y.prototype._intersectHeightfield;const ht=new i,ut=new i;Y.prototype[m.types.SPHERE]=Y.prototype._intersectSphere;const dt=new i,pt=new i;Y.prototype[m.types.CONVEXPOLYHEDRON]=Y.prototype._intersectConvex;const yt=new i,mt=new i,vt=new i,wt=new i,ft=new i,gt=new i,xt=(new a,[]),bt=new v;Y.prototype[m.types.TRIMESH]=Y.prototype._intersectTrimesh;const At=new i,Bt=new i;class Et extends O{constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,o=i.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const t=i[r];for(a=r+1;a<o;a++){const o=i[a];if(this.needBroadphaseCollision(t,o)){if(!Et.checkBounds(t,o,n))break;this.intersectionTest(t,o,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let e=0;e!==s;e++){const s=t[e];s.aabbNeedsUpdate&&s.computeAABB()}0===e?Et.insertionSortX(t):1===e?Et.insertionSortY(t):2===e&&Et.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let l=0;l!==a;l++){const a=r[l],c=a.position.x;t+=c,e+=c*c;const h=a.position.y;s+=h,i+=h*h;const u=a.position.z;o+=u,n+=u*u}const c=e-t*t*l,h=i-s*s*l,u=n-o*o*l;this.axisIndex=c>h?c>u?0:2:h>u?1:2}aabbQuery(t,e,s=[]){this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o="x";1===i&&(o="y"),2===i&&(o="z");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let t=0;t<n.length;t++){const i=n[t];i.aabbNeedsUpdate&&i.computeAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}function St(){}Et.insertionSortX=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.insertionSortY=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.insertionSortZ=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.checkBounds=(t,e,s)=>{let i,o;0===s?(i=t.position.x,o=e.position.x):1===s?(i=t.position.y,o=e.position.y):2===s&&(i=t.position.z,o=e.position.z);const n=t.boundingRadius;return o-e.boundingRadius<i+n},St.defaults=(t={},e)=>{for(let s in e)s in t||(t[s]=e[s]);return t};class zt{constructor(t,e,s={}){s=St.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=zt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}zt.idCounter=0;class Ft{constructor(){this.spatial=new i,this.rotational=new i}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ct{constructor(t,e,s=-1e6,i=1e6){this.id=Ct.id++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Ft,this.jacobianElementB=new Ft,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,c=i.invMassSolve;return o.scale(l,Mt),r.scale(c,Rt),s.invInertiaWorldSolve.vmult(n,It),i.invInertiaWorldSolve.vmult(a,Tt),t.multiplyVectors(Mt,It)+e.multiplyVectors(Rt,Tt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,qt),l+=qt.dot(t.rotational),a.vmult(e.rotational,qt),l+=qt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=Lt;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ct.id=0;const Mt=new i,Rt=new i,It=new i,Tt=new i,qt=new i,Lt=new i;class Pt extends Ct{constructor(t,e,s=1e6){super(t,e,0,s),this.restitution=0,this.ri=new i,this.rj=new i,this.ni=new i}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=Nt,l=Wt,c=i.velocity,h=i.angularVelocity,u=(i.force,i.torque,o.velocity),d=o.angularVelocity,p=(o.force,o.torque,Vt),y=this.jacobianElementA,m=this.jacobianElementB,v=this.ni;n.cross(v,a),r.cross(v,l),v.negate(y.spatial),a.negate(y.rotational),m.spatial.copy(v),m.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const w=v.dot(p),f=this.restitution+1;return-w*e-(f*u.dot(v)-f*c.dot(v)+d.dot(l)-h.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=kt,e=jt,s=Ot,i=_t,o=Ut;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const Nt=new i,Wt=new i,Vt=new i,kt=new i,jt=new i,Ot=new i,_t=new i,Ut=new i;class Ht extends zt{constructor(t,e=new i,s,o=new i,n=1e6){super(t,s),this.pivotA=e.clone(),this.pivotB=o.clone();const r=this.equationX=new Pt(t,s),a=this.equationY=new Pt(t,s),l=this.equationZ=new Pt(t,s);this.equations.push(r,a,l),r.minForce=a.minForce=l.minForce=-n,r.maxForce=a.maxForce=l.maxForce=n,r.ni.set(1,0,0),a.ni.set(0,1,0),l.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,o=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),o.ri.copy(s.ri),o.rj.copy(s.rj)}}class Dt extends Ct{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-o,o),this.axisA=s.axisA?s.axisA.clone():new i(1,0,0),this.axisB=s.axisB?s.axisB.clone():new i(0,1,0),this.angle=void 0!==s.angle?s.angle:0}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Gt,r=Xt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.angle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const Gt=new i,Xt=new i;class Yt extends Ct{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-o,o),this.axisA=s.axisA?s.axisA.clone():new i(1,0,0),this.axisB=s.axisB?s.axisB.clone():new i(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Zt,r=Kt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.maxAngle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const Zt=new i,Kt=new i;class Qt extends Ht{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new i,e,s.pivotB?s.pivotB.clone():new i,o),this.axisA=s.axisA?s.axisA.clone():new i,this.axisB=s.axisB?s.axisB.clone():new i,this.collideConnected=!!s.collideConnected,this.angle=void 0!==s.angle?s.angle:0;const n=this.coneEquation=new Dt(t,e,s),r=this.twistEquation=new Yt(t,e,s);this.twistAngle=void 0!==s.twistAngle?s.twistAngle:0,n.maxForce=0,n.minForce=-o,r.maxForce=0,r.minForce=-o,this.equations.push(n,r)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,i=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(i.axisA,i.axisA),t.vectorToWorldFrame(i.axisA,i.axisA),this.axisB.tangents(i.axisB,i.axisB),e.vectorToWorldFrame(i.axisB,i.axisB),s.angle=this.angle,i.maxAngle=this.twistAngle}}class Jt extends zt{constructor(t,e,s,i=1e6){super(t,e),void 0===s&&(s=t.position.distanceTo(e.position)),this.distance=s;const o=this.distanceEquation=new Pt(t,e);this.equations.push(o),o.minForce=-i,o.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=.5*this.distance,o=s.ni;e.position.vsub(t.position,o),o.normalize(),o.scale(i,s.ri),o.scale(-i,s.rj)}}class $t extends Ht{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6,n=new i,r=new i,a=new i;t.position.vadd(e.position,a),a.scale(.5,a),e.pointToLocalFrame(a,r),t.pointToLocalFrame(a,n),super(t,n,e,r,o),this.xA=t.vectorToLocalFrame(i.UNIT_X),this.xB=e.vectorToLocalFrame(i.UNIT_X),this.yA=t.vectorToLocalFrame(i.UNIT_Y),this.yB=e.vectorToLocalFrame(i.UNIT_Y),this.zA=t.vectorToLocalFrame(i.UNIT_Z),this.zB=e.vectorToLocalFrame(i.UNIT_Z);const l=this.rotationalEquation1=new Yt(t,e,s),c=this.rotationalEquation2=new Yt(t,e,s),h=this.rotationalEquation3=new Yt(t,e,s);this.equations.push(l,c,h)}update(){const t=this.bodyA,e=this.bodyB,s=(this.motorEquation,this.rotationalEquation1),i=this.rotationalEquation2,o=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,i.axisA),e.vectorToWorldFrame(this.zB,i.axisB),t.vectorToWorldFrame(this.zA,o.axisA),e.vectorToWorldFrame(this.xB,o.axisB)}}class te extends Ct{constructor(t,e,s=1e6){super(t,e,-s,s),this.axisA=new i,this.axisB=new i,this.targetVelocity=0}computeB(t){this.a;const e=this.b,s=(this.bi,this.bj,this.axisA),i=this.axisB,o=this.jacobianElementA,n=this.jacobianElementB;o.rotational.copy(s),i.negate(n.rotational);return-(this.computeGW()-this.targetVelocity)*e-t*this.computeGiMf()}}class ee extends Ht{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new i,e,s.pivotB?s.pivotB.clone():new i,o);(this.axisA=s.axisA?s.axisA.clone():new i(1,0,0)).normalize();(this.axisB=s.axisB?s.axisB.clone():new i(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const n=this.rotationalEquation1=new Yt(t,e,s),r=this.rotationalEquation2=new Yt(t,e,s),a=this.motorEquation=new te(t,e,o);a.enabled=!1,this.equations.push(n,r,a)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,o=this.rotationalEquation2,n=se,r=ie,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,n),e.quaternion.vmult(l,r),n.tangents(i.axisA,o.axisA),i.axisB.copy(r),o.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const se=new i,ie=new i;class oe extends Ct{constructor(t,e,s){super(t,e,-s,s),this.ri=new i,this.rj=new i,this.t=new i}computeB(t){this.a;const e=this.b,s=(this.bi,this.bj,this.ri),i=this.rj,o=ne,n=re,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const ne=new i,re=new i;class ae{constructor(t,e,s){s=St.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ae.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}ae.idCounter=0;class le{constructor(t={}){let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=le.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}le.idCounter=0;class ce{constructor(t,e,s={}){this.restLength="number"==typeof s.restLength?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new i,this.localAnchorB=new i,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,i=this.bodyA,o=this.bodyB,n=he,r=ue,a=de,l=pe,c=xe,h=ye,u=me,d=ve,p=we,y=fe,m=ge;this.getWorldAnchorA(h),this.getWorldAnchorB(u),h.vsub(i.position,d),u.vsub(o.position,p),u.vsub(h,n);const v=n.length();r.copy(n),r.normalize(),o.velocity.vsub(i.velocity,a),o.angularVelocity.cross(p,c),a.vadd(c,a),i.angularVelocity.cross(d,c),a.vsub(c,a),r.scale(-t*(v-s)-e*a.dot(r),l),i.force.vsub(l,i.force),o.force.vadd(l,o.force),d.cross(l,y),p.cross(l,m),i.torque.vsub(y,i.torque),o.torque.vadd(m,o.torque)}}const he=new i,ue=new i,de=new i,pe=new i,ye=new i,me=new i,ve=new i,we=new i,fe=new i,ge=new i,xe=new i;class be{constructor(t={}){t=St.defaults(t,{chassisConnectionPointLocal:new i,chassisConnectionPointWorld:new i,directionLocal:new i,directionWorld:new i,axleLocal:new i,axleWorld:new i,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:1e4,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new X,this.worldTransform=new v,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,Be),t.getVelocityAtWorldPoint(Be,Ae);const i=e.hitNormalWorld.dot(Ae);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=10;else{const t=-1/s;this.suspensionRelativeVelocity=i*t,this.clippedInvContactDotSuspension=t}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const Ae=new i,Be=new i;class Ee{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=void 0!==t.indexRightAxis?t.indexRightAxis:1,this.indexForwardAxis=void 0!==t.indexForwardAxis?t.indexForwardAxis:0,this.indexUpAxis=void 0!==t.indexUpAxis?t.indexUpAxis:2,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0}addWheel(t={}){const e=new be(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){this.wheelInfos[e].steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){this.constraints;t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(0===t?1:0,1===t?1:0,2===t?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,o=this.chassisBody;for(let t=0;t<s;t++)this.updateWheelTransform(t);this.currentVehicleSpeedKmHour=3.6*o.velocity.length();const n=new i;this.getVehicleAxisWorld(this.indexForwardAxis,n),n.dot(o.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let t=0;t<s;t++)this.castRay(e[t]);this.updateSuspension(t);const r=new i,a=new i;for(let i=0;i<s;i++){const s=e[i];let n=s.suspensionForce;n>s.maxSuspensionForce&&(n=s.maxSuspensionForce),s.raycastResult.hitNormalWorld.scale(n*t,r),s.raycastResult.hitPointWorld.vsub(o.position,a),o.applyImpulse(r,a)}this.updateFriction(t);const l=new i,c=new i,h=new i;for(let i=0;i<s;i++){const s=e[i];o.getVelocityAtWorldPoint(s.chassisConnectionPointWorld,h);let n=1;switch(this.indexUpAxis){case 1:n=-1}if(s.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,c);const e=c.dot(s.raycastResult.hitNormalWorld);s.raycastResult.hitNormalWorld.scale(e,l),c.vsub(l,c);const i=c.dot(h);s.deltaRotation=n*i*t/s.radius}!s.sliding&&s.isInContact||0===s.engineForce||!s.useCustomSlidingRotationalSpeed||(s.deltaRotation=(s.engineForce>0?1:-1)*s.customSlidingRotationalSpeed*t),Math.abs(s.brake)>Math.abs(s.engineForce)&&(s.deltaRotation=0),s.rotation+=s.deltaRotation,s.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody.mass,s=this.wheelInfos,i=s.length;for(let t=0;t<i;t++){const i=s[t];if(i.isInContact){let t;const s=i.suspensionRestLength-i.suspensionLength;t=i.suspensionStiffness*s*i.clippedInvContactDotSuspension;const o=i.suspensionRelativeVelocity;let n;n=o<0?i.dampingCompression:i.dampingRelaxation,t-=n*o,i.suspensionForce=t*e,i.suspensionForce<0&&(i.suspensionForce=0)}else i.suspensionForce=0}}removeFromWorld(t){this.constraints;t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=Ce,s=Me;this.updateWheelTransformWorld(t);const o=this.chassisBody;let n=-1;const r=t.suspensionRestLength+t.radius;t.directionWorld.scale(r,e);const a=t.chassisConnectionPointWorld;a.vadd(e,s);const l=t.raycastResult;l.reset();const c=o.collisionResponse;o.collisionResponse=!1,this.world.rayTest(a,s,l),o.collisionResponse=c;const h=l.body;if(t.raycastResult.groundObject=0,h){n=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const e=l.distance;t.suspensionLength=e-t.radius;const s=t.suspensionRestLength-t.maxSuspensionTravel,r=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<s&&(t.suspensionLength=s),t.suspensionLength>r&&(t.suspensionLength=r,t.raycastResult.reset());const a=t.raycastResult.hitNormalWorld.dot(t.directionWorld),c=new i;o.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,c);const h=t.raycastResult.hitNormalWorld.dot(c);if(a>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=10;else{const e=-1/a;t.suspensionRelativeVelocity=h*e,t.clippedInvContactDotSuspension=e}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return n}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=Se,s=ze,i=Fe,o=this.wheelInfos[t];this.updateWheelTransformWorld(o),o.directionLocal.scale(-1,e),s.copy(o.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const n=o.steering,r=new d;r.setFromAxisAngle(e,n);const a=new d;a.setFromAxisAngle(s,o.rotation);const l=o.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const c=o.worldTransform.position;c.copy(o.directionWorld),c.scale(o.suspensionLength,c),c.vadd(o.chassisConnectionPointWorld,c)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Ie,s=this.wheelInfos,o=s.length,n=this.chassisBody,r=qe,a=Te;for(let t=0;t<o;t++){const e=s[t];e.raycastResult.body;e.sideImpulse=0,e.forwardImpulse=0,r[t]||(r[t]=new i),a[t]||(a[t]=new i)}for(let t=0;t<o;t++){const i=s[t],o=i.raycastResult.body;if(o){const s=a[t];this.getWheelTransformWorld(t).vectorToWorldFrame(Re[this.indexRightAxis],s);const l=i.raycastResult.hitNormalWorld,c=s.dot(l);l.scale(c,e),s.vsub(e,s),s.normalize(),l.cross(s,r[t]),r[t].normalize(),i.sideImpulse=Xe(n,i.raycastResult.hitPointWorld,o,i.raycastResult.hitPointWorld,s),i.sideImpulse*=Le}}this.sliding=!1;for(let e=0;e<o;e++){const i=s[e],o=i.raycastResult.body;let a=0;if(i.slipInfo=1,o){const s=0,l=i.brake?i.brake:s;a=Ve(n,o,i.raycastResult.hitPointWorld,r[e],l),a+=i.engineForce*t;const c=l/a;i.slipInfo*=c}if(i.forwardImpulse=0,i.skidInfo=1,o){i.skidInfo=1;const e=i.suspensionForce*t*i.frictionSlip,s=e*e;i.forwardImpulse=a;const o=.5*i.forwardImpulse,n=1*i.sideImpulse,r=o*o+n*n;if(i.sliding=!1,r>s){this.sliding=!0,i.sliding=!0;const t=e/Math.sqrt(r);i.skidInfo*=t}}}if(this.sliding)for(let t=0;t<o;t++){const e=s[t];0!==e.sideImpulse&&e.skidInfo<1&&(e.forwardImpulse*=e.skidInfo,e.sideImpulse*=e.skidInfo)}for(let t=0;t<o;t++){const e=s[t],o=new i;if(e.raycastResult.hitPointWorld.vsub(n.position,o),0!==e.forwardImpulse){const s=new i;r[t].scale(e.forwardImpulse,s),n.applyImpulse(s,o)}if(0!==e.sideImpulse){const s=e.raycastResult.body,r=new i;e.raycastResult.hitPointWorld.vsub(s.position,r);const l=new i;a[t].scale(e.sideImpulse,l),n.vectorToLocalFrame(o,o),o["xyz"[this.indexUpAxis]]*=e.rollInfluence,n.vectorToWorldFrame(o,o),n.applyImpulse(l,o),l.scale(-1,l),s.applyImpulse(l,r)}}}}const Se=new i,ze=new i,Fe=new i,Ce=(new Y,new i),Me=new i,Re=[new i(1,0,0),new i(0,1,0),new i(0,0,1)],Ie=new i,Te=[],qe=[],Le=1,Pe=new i,Ne=new i,We=new i;function Ve(t,e,s,i,o){let n=0;const r=s,a=Pe,l=Ne,c=We;t.getVelocityAtWorldPoint(r,a),e.getVelocityAtWorldPoint(r,l),a.vsub(l,c);return n=-i.dot(c)*(1/(Ue(t,s,i)+Ue(e,s,i))),o<n&&(n=o),n<-o&&(n=-o),n}const ke=new i,je=new i,Oe=new i,_e=new i;function Ue(t,e,s){const i=ke,o=je,n=Oe,r=_e;return e.vsub(t.position,i),i.cross(s,o),t.invInertiaWorld.vmult(o,r),r.cross(i,n),t.invMass+s.dot(n)}const He=new i,De=new i,Ge=new i;function Xe(t,e,s,i,o){if(o.lengthSquared()>1.1)return 0;const n=He,r=De,a=Ge;t.getVelocityAtWorldPoint(e,n),s.getVelocityAtWorldPoint(i,r),n.vsub(r,a);return-.2*o.dot(a)*(1/(t.invMass+s.invMass))}class Ye extends m{constructor(t){if(super({type:m.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e=new i){const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const o=this.radius,n=["x","y","z"];for(let e=0;e<n.length;e++){const r=n[e];s[r]=t[r]-o,i[r]=t[r]+o}}}class Ze extends f{constructor(t,e,s,o){const n=o,r=[],a=[],l=[],c=[],h=[],u=Math.cos,d=Math.sin;r.push(new i(-e*d(0),.5*-s,e*u(0))),c.push(0),r.push(new i(-t*d(0),.5*s,t*u(0))),h.push(1);for(let o=0;o<n;o++){const p=2*Math.PI/n*(o+1),y=2*Math.PI/n*(o+.5);o<n-1?(r.push(new i(-e*d(p),.5*-s,e*u(p))),c.push(2*o+2),r.push(new i(-t*d(p),.5*s,t*u(p))),h.push(2*o+3),l.push([2*o,2*o+1,2*o+3,2*o+2])):l.push([2*o,2*o+1,1,0]),(n%2==1||o<n/2)&&a.push(new i(-d(y),0,u(y)))}l.push(c),a.push(new i(0,1,0));const p=[];for(let t=0;t<h.length;t++)p.push(h[h.length-t-1]);l.push(p),super({vertices:r,faces:l,axes:a})}}class Ke extends m{constructor(){super({type:m.types.PARTICLE})}calculateLocalInertia(t,e=new i){return e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,i){s.copy(t),i.copy(t)}}class Qe extends m{constructor(){super({type:m.types.PLANE}),this.worldNormal=new i,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e=new i){return e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){Je.set(0,0,1),e.vmult(Je,Je);const o=Number.MAX_VALUE;s.set(-o,-o,-o),i.set(o,o,o),1===Je.x?i.x=t.x:-1===Je.x&&(s.x=t.x),1===Je.y?i.y=t.y:-1===Je.y&&(s.y=t.y),1===Je.z?i.z=t.z:-1===Je.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const Je=new i;class $e extends m{constructor(t,e={}){e=St.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:m.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,null===e.minValue&&this.updateMinValue(),null===e.maxValue&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new f,this.pillarOffset=new i,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o<e&&(e=o)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o>e&&(e=o)}this.maxValue=e}setHeightValueAtIndex(t,e,s){this.data[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,o=[]){const n=this.data;let r=this.minValue;for(let o=t;o<=s;o++)for(let t=e;t<=i;t++){const e=n[o][t];e>r&&(r=e)}o[0]=this.minValue,o[1]=r}getIndexOfPosition(t,e,s,i){const o=this.elementSize,n=this.data;let r=Math.floor(t/o),a=Math.floor(e/o);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=n.length-1&&(r=n.length-1),a>=n[0].length-1&&(a=n[0].length-1)),!(r<0||a<0||r>=n.length-1||a>=n[0].length-1)}getTriangleAt(t,e,s,i,o,n){const r=ts;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const c=this.data;s&&(a=Math.min(c.length-2,Math.max(0,a)),l=Math.min(c[0].length-2,Math.max(0,l)));const h=this.elementSize,u=(t/h-a)**2+(e/h-l)**2>(t/h-(a+1))**2+(e/h-(l+1))**2;return this.getTriangle(a,l,u,i,o,n),u}getNormalAt(t,e,s,i){const o=ns,n=rs,r=as,a=ls,l=cs;this.getTriangleAt(t,e,s,o,n,r),n.vsub(o,a),r.vsub(o,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,{lowerBound:s,upperBound:i}){const o=this.data,n=this.elementSize;s.set(t*n,e*n,o[t][e]),i.set((t+1)*n,(e+1)*n,o[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,o=ss,n=is,r=os,a=ts;this.getIndexOfPosition(t,e,a,s);let l=a[0],c=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),c=Math.min(i[0].length-2,Math.max(0,c)));const h=this.getTriangleAt(t,e,s,o,n,r);!function(t,e,s,i,o,n,r,a,l){l.x=((n-a)*(t-r)+(r-o)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.y=((a-i)*(t-r)+(s-r)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.z=1-l.x-l.y}(t,e,o.x,o.y,n.x,n.y,r.x,r.y,es);const u=es;return h?i[l+1][c+1]*u.x+i[l][c+1]*u.y+i[l+1][c]*u.z:i[l][c]*u.x+i[l+1][c]*u.y+i[l][c+1]*u.z}getCacheConvexTrianglePillarKey(t,e,s){return t+"_"+e+"_"+(s?1:0)}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,o){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:o}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,o,n){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),o.set(t*a,(e+1)*a,r[t][e+1]),n.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),o.set((t+1)*a,e*a,r[t+1][e]),n.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let o=this.pillarConvex,n=this.pillarOffset;if(this.cacheEnabled){const r=this.getCachedConvexTrianglePillar(t,e,s);if(r)return this.pillarConvex=r.convex,void(this.pillarOffset=r.offset);o=new f,n=new i,this.pillarConvex=o,this.pillarOffset=n}const r=this.data,a=this.elementSize,l=o.faces;o.vertices.length=6;for(let t=0;t<6;t++)o.vertices[t]||(o.vertices[t]=new i);l.length=5;for(let t=0;t<5;t++)l[t]||(l[t]=[]);const c=o.vertices,h=(Math.min(r[t][e],r[t+1][e],r[t][e+1],r[t+1][e+1])-this.minValue)/2+this.minValue;s?(n.set((t+.75)*a,(e+.75)*a,h),c[0].set(.25*a,.25*a,r[t+1][e+1]-h),c[1].set(-.75*a,.25*a,r[t][e+1]-h),c[2].set(.25*a,-.75*a,r[t+1][e]-h),c[3].set(.25*a,.25*a,-h-1),c[4].set(-.75*a,.25*a,-h-1),c[5].set(.25*a,-.75*a,-h-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(n.set((t+.25)*a,(e+.25)*a,h),c[0].set(-.25*a,-.25*a,r[t][e]-h),c[1].set(.75*a,-.25*a,r[t+1][e]-h),c[2].set(-.25*a,.75*a,r[t][e+1]-h),c[3].set(-.25*a,-.25*a,-h-1),c[4].set(.75*a,-.25*a,-h-1),c[5].set(-.25*a,.75*a,-h-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),o.computeNormals(),o.computeEdges(),o.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,o,n)}calculateLocalInertia(t,e=new i){return e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new i(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:o}=e,n=document.createElement("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let t=0;t<a.height;t++){const e=[];for(let o=0;o<a.width;o++){const n=(a.data[4*(t*a.height+o)]+a.data[4*(t*a.height+o)+1]+a.data[4*(t*a.height+o)+2])/4/255*i;s<0?e.push(n):e.unshift(n)}o<0?l.unshift(e):l.push(e)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const ts=[],es=new i,ss=new i,is=new i,os=new i,ns=new i,rs=new i,as=new i,ls=new i,cs=new i;class hs{constructor(t={}){this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new a,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s=0){const i=this.data;if(!this.aabb.contains(t))return!1;const o=this.children;if(s<(this.maxDepth||this.root.maxDepth)){let i=!1;o.length||(this.subdivide(),i=!0);for(let i=0;8!==i;i++)if(o[i].insert(t,e,s+1))return!0;i&&(o.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,o=this.children;o.push(new hs({aabb:new a({lowerBound:new i(0,0,0)})}),new hs({aabb:new a({lowerBound:new i(1,0,0)})}),new hs({aabb:new a({lowerBound:new i(1,1,0)})}),new hs({aabb:new a({lowerBound:new i(1,1,1)})}),new hs({aabb:new a({lowerBound:new i(0,1,1)})}),new hs({aabb:new a({lowerBound:new i(0,0,1)})}),new hs({aabb:new a({lowerBound:new i(1,0,1)})}),new hs({aabb:new a({lowerBound:new i(0,1,0)})})),s.vsub(e,ds),ds.scale(.5,ds);const n=this.root||this;for(let t=0;8!==t;t++){const s=o[t];s.root=n;const i=s.aabb.lowerBound;i.x*=ds.x,i.y*=ds.y,i.z*=ds.z,i.vadd(e,i),i.vadd(ds,s.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB(ps),ps.toLocalFrame(e,ps),this.aabbQuery(ps,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class us extends hs{constructor(t,e={}){super({root:null,aabb:t}),this.maxDepth=void 0!==e.maxDepth?e.maxDepth:8}}const ds=new i,ps=new a;class ys extends m{constructor(t,e){super({type:m.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new a,this.edges=null,this.scale=new i(1,1,1),this.tree=new us,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new a,o=new i,n=new i,r=new i,l=[o,n,r];for(let e=0;e<this.indices.length/3;e++){const i=3*e;this._getUnscaledVertex(this.indices[i],o),this._getUnscaledVertex(this.indices[i+1],n),this._getUnscaledVertex(this.indices[i+2],r),s.setFromPoints(l),t.insert(s,e)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){vs.copy(t);const s=this.scale,i=s.x,o=s.y,n=s.z,r=vs.lowerBound,a=vs.upperBound;return r.x/=i,r.y/=o,r.z/=n,a.x/=i,a.y/=o,a.z/=n,this.tree.aabbQuery(vs,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=ms,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=3*s,o=this.indices[i],n=this.indices[i+1],r=this.indices[i+2];this.getVertex(o,bs),this.getVertex(n,As),this.getVertex(r,Bs),ys.computeNormal(As,bs,Bs,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},e=(e,s)=>{t[e<s?e+"_"+s:s+"_"+e]=!0};for(let t=0;t<this.indices.length/3;t++){const s=3*t,i=this.indices[s],o=this.indices[s+1],n=this.indices[s+2];e(i,o),e(o,n),e(n,i)}const s=Object.keys(t);this.edges=new Int16Array(2*s.length);for(let t=0;t<s.length;t++){const e=s[t].split("_");this.edges[2*t]=parseInt(e[0],10),this.edges[2*t+1]=parseInt(e[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[2*t+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=ws,i=fs;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=3*t,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),v.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const o=3*t;this.getVertex(this.indices[o],e),this.getVertex(this.indices[o+1],s),this.getVertex(this.indices[o+2],i)}getNormal(t,e){const s=3*t;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(Es);const s=Es.upperBound.x-Es.lowerBound.x,i=Es.upperBound.y-Es.lowerBound.y,o=Es.upperBound.z-Es.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*o*2*o),1/12*t*(2*s*2*s+2*o*2*o),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length,o=(this.vertices,Ss);this.getVertex(0,o),e.copy(o),s.copy(o);for(let t=0;t!==i;t++)this.getVertex(t,o),o.x<e.x?e.x=o.x:o.x>s.x&&(s.x=o.x),o.y<e.y?e.y=o.y:o.y>s.y&&(s.y=o.y),o.z<e.z?e.z=o.z:o.z>s.z&&(s.z=o.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new i;for(let i=0,o=e.length/3;i!==o;i++){this.getVertex(i,s);const e=s.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=zs,n=Fs;o.position=t,o.quaternion=e,this.aabb.toWorldFrame(o,n),s.copy(n.lowerBound),i.copy(n.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}}const ms=new i,vs=new a,ws=new i,fs=new i,gs=new i,xs=new i;ys.computeNormal=(t,e,s,i)=>{e.vsub(t,xs),s.vsub(e,gs),gs.cross(xs,i),i.isZero()||i.normalize()};const bs=new i,As=new i,Bs=new i,Es=new a,Ss=new i,zs=new v,Fs=new a;ys.createTorus=(t=1,e=.5,s=8,i=6,o=2*Math.PI)=>{const n=[],r=[];for(let r=0;r<=s;r++)for(let a=0;a<=i;a++){const l=a/i*o,c=r/s*Math.PI*2,h=(t+e*Math.cos(c))*Math.cos(l),u=(t+e*Math.cos(c))*Math.sin(l),d=e*Math.sin(c);n.push(h,u,d)}for(let t=1;t<=s;t++)for(let e=1;e<=i;e++){const s=(i+1)*t+e-1,o=(i+1)*(t-1)+e-1,n=(i+1)*(t-1)+e,a=(i+1)*t+e;r.push(s,o,a),r.push(o,n,a)}return new ys(n,r)};class Cs extends class{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,c=t;let h,u,d,p,y,m;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const v=Rs,w=Is,f=Ms;v.length=r,w.length=r,f.length=r;for(let t=0;t!==r;t++){const e=n[t];f[t]=0,w[t]=e.computeB(c),v[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=n[t];h=w[t],u=v[t],m=f[t],y=e.computeGWlambda(),d=u*(h-y-e.eps*m),m+d<e.minForce?d=e.minForce-m:m+d>e.maxForce&&(d=e.maxForce-m),f[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<o)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=n.length;const e=1/c;for(;t--;)n[t].multiplier=f[t]*e}return s}}const Ms=[],Rs=[],Is=[];class Ts extends class{constructor(){this.objects=[],this.type=Object}release(...t){const e=t.length;for(let s=0;s!==e;s++)this.objects.push(t[s]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}{constructor(){super(),this.type=i}constructObject(){return new i}}const qs=m.types.SPHERE,Ls=m.types.SPHERE|m.types.PLANE,Ps=m.types.BOX|m.types.BOX,Ns=m.types.SPHERE|m.types.BOX,Ws=m.types.PLANE|m.types.BOX,Vs=m.types.CONVEXPOLYHEDRON,ks=m.types.SPHERE|m.types.CONVEXPOLYHEDRON,js=m.types.PLANE|m.types.CONVEXPOLYHEDRON,Os=m.types.BOX|m.types.CONVEXPOLYHEDRON,_s=m.types.SPHERE|m.types.HEIGHTFIELD,Us=m.types.BOX|m.types.HEIGHTFIELD,Hs=m.types.CONVEXPOLYHEDRON|m.types.HEIGHTFIELD,Ds=m.types.PARTICLE|m.types.SPHERE,Gs=m.types.PLANE|m.types.PARTICLE,Xs=m.types.BOX|m.types.PARTICLE,Ys=m.types.PARTICLE|m.types.CONVEXPOLYHEDRON,Zs=m.types.SPHERE|m.types.TRIMESH,Ks=m.types.PLANE|m.types.TRIMESH;class Qs{constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Ts,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Pt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,c=i.material||e.material;return l&&c&&l.restitution>=0&&c.restitution>=0&&(r.restitution=l.restitution*c.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const c=o.material||s.material,h=n.material||i.material;if(c&&h&&c.friction>=0&&h.friction>=0&&(l=c.friction*h.friction),l>0){const o=l*r.gravity.length();let n=s.invMass+i.invMass;n>0&&(n=1/n);const c=this.frictionEquationPool,h=c.length?c.pop():new oe(s,i,o*n),u=c.length?c.pop():new oe(s,i,o*n);return h.bi=u.bi=s,h.bj=u.bj=i,h.minForce=u.minForce=-o*n,h.maxForce=u.maxForce=o*n,h.ri.copy(t.ri),h.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(h.t,u.t),h.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),h.enabled=u.enabled=t.enabled,e.push(h,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];Js.setZero(),$s.setZero(),ti.setZero();const o=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==o?(Js.vadd(e.ni,Js),$s.vadd(e.ri,$s),ti.vadd(e.rj,ti)):(Js.vsub(e.ni,Js),$s.vadd(e.rj,$s),ti.vadd(e.ri,ti));const n=1/t;$s.scale(n,s.ri),ti.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),Js.normalize(),Js.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=ii,l=oi,c=ei,h=si;for(let i=0,o=t.length;i!==o;i++){const o=t[i],n=e[i];let r=null;o.material&&n.material&&(r=s.getContactMaterial(o.material,n.material)||null);const u=o.type&F.KINEMATIC&&n.type&F.STATIC||o.type&F.STATIC&&n.type&F.KINEMATIC||o.type&F.KINEMATIC&&n.type&F.KINEMATIC;for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],a),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const e=o.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],h),h.vadd(n.position,h);const i=n.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(c.distanceTo(h)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let d=null;e.material&&i.material&&(d=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=d||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,c,h,a,l,o,n,e,i,u):p.call(this,i,e,h,c,l,a,n,o,e,i,u),t&&u&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(o.id,n.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,c,h){if(h)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,c);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,c,h){const u=this.createContactEquation(r,a,t,e,l,c);if(u.ni.set(0,0,1),n.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,Bi),u.ni.scale(u.ni.dot(Bi),Ei),Bi.vsub(Ei,u.rj),-Bi.dot(u.ni)<=t.radius){if(h)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,h)}sphereBox(t,e,s,i,o,n,r,a,l,c,h){const u=this.v3pool,d=qi;s.vsub(i,Mi),e.getSideNormals(d,n);const p=t.radius;let y=!1;const m=Pi,v=Ni,w=Wi;let f=null,g=0,x=0,b=0,A=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=Ri;e.copy(d[t]);const s=e.length();e.normalize();const i=Mi.dot(e);if(i<s+p&&i>0){const o=Ii,n=Ti;o.copy(d[(t+1)%3]),n.copy(d[(t+2)%3]);const r=o.length(),a=n.length();o.normalize(),n.normalize();const l=Mi.dot(o),c=Mi.dot(n);if(l<r&&l>-r&&c<a&&c>-a){const t=Math.abs(i-s-p);if((null===A||t<A)&&(A=t,x=l,b=c,f=s,m.copy(e),v.copy(o),w.copy(n),g++,h))return!0}}}if(g){y=!0;const o=this.createContactEquation(r,a,t,e,l,c);m.scale(-p,o.ri),o.ni.copy(m),o.ni.negate(o.ni),m.scale(f,m),v.scale(x,v),m.vadd(v,m),w.scale(b,w),m.vadd(w,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let B=u.get();const E=Li;for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)for(let u=0;2!==u&&!y;u++)if(B.set(0,0,0),o?B.vadd(d[0],B):B.vsub(d[0],B),n?B.vadd(d[1],B):B.vsub(d[1],B),u?B.vadd(d[2],B):B.vsub(d[2],B),i.vadd(B,E),E.vsub(s,E),E.lengthSquared()<p*p){if(h)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,c);o.ri.copy(E),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(B),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}u.release(B),B=null;const S=u.get(),z=u.get(),F=u.get(),C=u.get(),M=u.get(),R=d.length;for(let o=0;o!==R&&!y;o++)for(let n=0;n!==R&&!y;n++)if(o%3!=n%3){d[n].cross(d[o],S),S.normalize(),d[o].vadd(d[n],z),F.copy(s),F.vsub(z,F),F.vsub(i,F);const u=F.dot(S);S.scale(u,C);let m=0;for(;m===o%3||m===n%3;)m++;M.copy(s),M.vsub(C,M),M.vsub(z,M),M.vsub(i,M);const v=Math.abs(u),w=M.length();if(v<d[m].length()&&w<p){if(h)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,c);z.vadd(C,o.rj),o.rj.copy(o.rj),M.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(s,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}u.release(S,z,F,C,M)}planeBox(t,e,s,i,o,n,r,a,l,c,h){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,h)}convexConvex(t,e,s,i,o,n,r,a,l,c,h,u,d){const p=Ji;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,u,d)){const u=[],d=$i;t.clipAgainstHull(s,o,e,i,n,p,-100,100,u);let y=0;for(let o=0;o!==u.length;o++){if(h)return!0;const n=this.createContactEquation(r,a,t,e,l,c),m=n.ri,v=n.rj;p.negate(n.ni),u[o].normal.negate(d),d.scale(u[o].depth,d),u[o].point.vadd(d,m),v.copy(u[o].point),m.vsub(s,m),v.vsub(i,v),m.vadd(s,m),m.vsub(r.position,m),v.vadd(i,v),v.vsub(a.position,v),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,o,n,r,a,l,c,h){const u=this.v3pool;s.vsub(i,Vi);const d=e.faceNormals,p=e.faces,y=e.vertices,m=t.radius;let v=!1;for(let o=0;o!==y.length;o++){const u=y[o],d=_i;n.vmult(u,d),i.vadd(d,d);const p=Oi;if(d.vsub(s,p),p.lengthSquared()<m*m){if(h)return!0;v=!0;const o=this.createContactEquation(r,a,t,e,l,c);return o.ri.copy(p),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(m,o.ri),d.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let o=0,w=p.length;o!==w&&!1===v;o++){const w=d[o],f=p[o],g=Ui;n.vmult(w,g);const x=Hi;n.vmult(y[f[0]],x),x.vadd(i,x);const b=Di;g.scale(-m,b),s.vadd(b,b);const A=Gi;b.vsub(x,A);const B=A.dot(g),E=Xi;if(s.vsub(x,E),B<0&&E.dot(g)>0){const o=[];for(let t=0,e=f.length;t!==e;t++){const e=u.get();n.vmult(y[f[t]],e),i.vadd(e,e),o.push(e)}if(Ci(o,g,s)){if(h)return!0;v=!0;const n=this.createContactEquation(r,a,t,e,l,c);g.scale(-m,n.ri),g.negate(n.ni);const d=u.get();g.scale(-B,d);const p=u.get();g.scale(-m,p),s.vsub(i,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(d,n.rj),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),u.release(d),u.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return}for(let d=0;d!==f.length;d++){const p=u.get(),v=u.get();n.vmult(y[f[(d+1)%f.length]],p),n.vmult(y[f[(d+2)%f.length]],v),i.vadd(p,p),i.vadd(v,v);const w=ki;v.vsub(p,w);const g=ji;w.unit(g);const x=u.get(),b=u.get();s.vsub(p,b);const A=b.dot(g);g.scale(A,x),x.vadd(p,x);const B=u.get();if(x.vsub(s,B),A>0&&A*A<w.lengthSquared()&&B.lengthSquared()<m*m){if(h)return!0;const n=this.createContactEquation(r,a,t,e,l,c);x.vsub(i,n.rj),x.vsub(s,n.ni),n.ni.normalize(),n.ni.scale(m,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return u.release(p),u.release(v),u.release(x),u.release(B),void u.release(b)}u.release(p),u.release(v),u.release(x),u.release(B),u.release(b)}for(let t=0,e=o.length;t!==e;t++)u.release(o[t])}}}planeConvex(t,e,s,i,o,n,r,a,l,c,h){const u=Yi,d=Zi;d.set(0,0,1),o.vmult(d,d);let p=0;const y=Ki;for(let o=0;o!==e.vertices.length;o++){u.copy(e.vertices[o]),n.vmult(u,u),i.vadd(u,u),u.vsub(s,y);if(d.dot(y)<=0){if(h)return!0;const o=this.createContactEquation(r,a,t,e,l,c),n=Qi;d.scale(d.dot(y),n),u.vsub(n,n),n.vsub(s,o.ri),o.ni.copy(d),u.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}sphereHeightfield(t,e,s,i,o,n,r,a,l,c,h){const u=e.data,d=t.radius,p=e.elementSize,y=yo,m=po;v.pointToLocalFrame(i,n,s,m);let w=Math.floor((m.x-d)/p)-1,f=Math.ceil((m.x+d)/p)+1,g=Math.floor((m.y-d)/p)-1,x=Math.ceil((m.y+d)/p)+1;if(f<0||x<0||w>u.length||g>u[0].length)return;w<0&&(w=0),f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),w>=u.length&&(w=u.length-1),f>=u.length&&(f=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(w,g,f,x,b);const A=b[0],B=b[1];if(m.z-d>B||m.z+d<A)return;const E=this.result;for(let l=w;l<f;l++)for(let c=g;c<x;c++){const u=E.length;let d=!1;if(e.getConvexTrianglePillar(l,c,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,h)),h&&d)return!0;if(e.getConvexTrianglePillar(l,c,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,h)),h&&d)return!0;if(E.length-u>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}convexHeightfield(t,e,s,i,o,n,r,a,l,c,h){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=ho,m=uo,w=co;v.pointToLocalFrame(i,n,s,w);let f=Math.floor((w.x-p)/d)-1,g=Math.ceil((w.x+p)/d)+1,x=Math.floor((w.y-p)/d)-1,b=Math.ceil((w.y+p)/d)+1;if(g<0||b<0||f>u.length||x>u[0].length)return;f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),f>=u.length&&(f=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const A=[];e.getRectMinMax(f,x,g,b,A);const B=A[0],E=A[1];if(!(w.z-p>E||w.z+p<B))for(let l=f;l<g;l++)for(let c=x;c<b;c++){let u=!1;if(e.getConvexTrianglePillar(l,c,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,h,m,null)),h&&u)return!0;if(e.getConvexTrianglePillar(l,c,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,h,m,null)),h&&u)return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,c,h){const u=io;u.set(0,0,1),i.vsub(s,u);if(u.lengthSquared()<=t.radius*t.radius){if(h)return!0;const s=this.createContactEquation(a,r,e,t,l,c);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,c,h){const u=to;u.set(0,0,1),r.quaternion.vmult(u,u);const d=eo;i.vsub(r.position,d);if(u.dot(d)<=0){if(h)return!0;const s=this.createContactEquation(a,r,e,t,l,c);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const o=so;u.scale(u.dot(i),o),i.vsub(o,o),s.rj.copy(o),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,c,h){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,h)}convexParticle(t,e,s,i,o,n,r,a,l,c,h){let u=-1;const d=ro,p=lo;let y=null;const m=no;if(m.copy(i),m.vsub(s,m),o.conjugate(oo),oo.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];i.vsub(s[0],ao);const n=-o.dot(ao);if(null===y||Math.abs(n)<Math.abs(y)){if(h)return!0;y=n,u=e,d.copy(o)}}if(-1!==u){const o=this.createContactEquation(a,r,e,t,l,c);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),o.rj.copy(p),d.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,h=o.rj;n.vadd(i,n),n.vsub(a.position,n),h.vadd(s,h),h.vsub(r.position,h),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}sphereTrimesh(t,e,s,i,o,n,r,a,l,c,h){const u=di,d=pi,p=yi,y=mi,m=vi,w=wi,f=bi,g=ui,x=ci,b=Ai;v.pointToLocalFrame(i,n,s,m);const A=t.radius;f.lowerBound.set(m.x-A,m.y-A,m.z-A),f.upperBound.set(m.x+A,m.y+A,m.z+A),e.getTrianglesInAABB(f,b);const B=hi,E=t.radius*t.radius;for(let o=0;o<b.length;o++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[o]+u],B),B.vsub(m,x),x.lengthSquared()<=E){if(g.copy(B),v.pointToWorldFrame(i,n,g,B),B.vsub(s,x),h)return!0;let o=this.createContactEquation(r,a,t,e,l,c);o.ni.copy(x),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(B),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let o=0;o<b.length;o++)for(let f=0;f<3;f++){e.getVertex(e.indices[3*b[o]+f],u),e.getVertex(e.indices[3*b[o]+(f+1)%3],d),d.vsub(u,p),m.vsub(d,w);const g=w.dot(p);m.vsub(u,w);let x=w.dot(p);if(x>0&&g<0){m.vsub(u,w),y.copy(p),y.normalize(),x=w.dot(y),y.scale(x,w),w.vadd(u,w);if(w.distanceTo(m)<t.radius){if(h)return!0;const o=this.createContactEquation(r,a,t,e,l,c);w.vsub(m,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,w,w),w.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const S=fi,z=gi,F=xi,C=li;for(let o=0,u=b.length;o!==u;o++){e.getTriangleVertices(b[o],S,z,F),e.getNormal(b[o],C),m.vsub(S,w);let u=w.dot(C);if(C.scale(u,w),m.vsub(w,w),u=w.distanceTo(m),Y.pointInTriangle(w,S,z,F)&&u<t.radius){if(h)return!0;let o=this.createContactEquation(r,a,t,e,l,c);w.vsub(m,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,w,w),w.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,o,n,r,a,l,c,h,u){const d=new i,p=ni;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new i;y.copy(d),v.pointToWorldFrame(o,r,y,d);const m=ri;d.vsub(s,m);if(p.dot(m)<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,c,h);s.ni.copy(p);const i=ai;p.scale(m.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const Js=new i,$s=new i,ti=new i,ei=new i,si=new i,ii=new d,oi=new d;Qs.prototype[Ps]=Qs.prototype.boxBox,Qs.prototype[Os]=Qs.prototype.boxConvex,Qs.prototype[Xs]=Qs.prototype.boxParticle,Qs.prototype[qs]=Qs.prototype.sphereSphere;const ni=new i,ri=new i,ai=new i;Qs.prototype[Ks]=Qs.prototype.planeTrimesh;const li=new i,ci=new i,hi=new i,ui=new i,di=new i,pi=new i,yi=new i,mi=new i,vi=new i,wi=new i,fi=new i,gi=new i,xi=new i,bi=new a,Ai=[];Qs.prototype[Zs]=Qs.prototype.sphereTrimesh;const Bi=new i,Ei=new i;Qs.prototype[Ls]=Qs.prototype.spherePlane;const Si=new i,zi=new i,Fi=new i;function Ci(t,e,s){let i=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=Si;t[(n+1)%o].vsub(r,a);const l=zi;a.cross(e,l);const c=Fi;s.vsub(r,c);const h=l.dot(c);if(!(null===i||h>0&&!0===i||h<=0&&!1===i))return!1;null===i&&(i=h>0)}return!0}const Mi=new i,Ri=new i,Ii=new i,Ti=new i,qi=[new i,new i,new i,new i,new i,new i],Li=new i,Pi=new i,Ni=new i,Wi=new i;Qs.prototype[Ns]=Qs.prototype.sphereBox;const Vi=new i,ki=new i,ji=new i,Oi=new i,_i=new i,Ui=new i,Hi=new i,Di=new i,Gi=new i,Xi=new i;Qs.prototype[ks]=Qs.prototype.sphereConvex,Qs.prototype[Ws]=Qs.prototype.planeBox;const Yi=new i,Zi=new i,Ki=new i,Qi=new i;Qs.prototype[js]=Qs.prototype.planeConvex;const Ji=new i,$i=new i;Qs.prototype[Vs]=Qs.prototype.convexConvex;const to=new i,eo=new i,so=new i;Qs.prototype[Gs]=Qs.prototype.planeParticle;const io=new i;Qs.prototype[Ds]=Qs.prototype.sphereParticle;const oo=new d,no=new i,ro=new i,ao=new i,lo=new i;Qs.prototype[Ys]=Qs.prototype.convexParticle,Qs.prototype[Us]=Qs.prototype.boxHeightfield;const co=new i,ho=new i,uo=[0];Qs.prototype[Hs]=Qs.prototype.convexHeightfield;const po=new i,yo=new i;Qs.prototype[_s]=Qs.prototype.sphereHeightfield;class mo{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let t=i.length-1;t>=o;t--)i[t+1]=i[t];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let e=0;e<o;e++){let o=!1;const n=s[e];for(;n>i[r];)r++;o=n===i[r],o||vo(t,n)}r=0;for(let t=0;t<n;t++){let o=!1;const n=i[t];for(;n>s[r];)r++;o=s[r]===n,o||vo(e,n)}}}function vo(t,e){t.push((4294901760&e)>>16,65535&e)}class wo{constructor(){this.data={keys:[]}}get(t,e){if(t>e){const s=e;e=t,t=s}return this.data[t+"-"+e]}set(t,e,s){if(t>e){const s=e;e=t,t=s}const i=t+"-"+e;this.get(t,e)||this.data.keys.push(i),this.data[i]=s}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class fo extends u{constructor(t={}){super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new i,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=void 0!==t.broadphase?t.broadphase:new G,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new Cs,this.constraints=[],this.narrowphase=new Qs(this),this.collisionMatrix=new h,this.collisionMatrixPrevious=new h,this.bodyOverlapKeeper=new mo,this.shapeOverlapKeeper=new mo,this.materials=[],this.contactmaterials=[],this.contactMaterialTable=new wo,this.defaultMaterial=new le("default"),this.defaultContactMaterial=new ae(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}numObjects(){return this.bodies.length}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof X?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s={},i){return s.mode=Y.ALL,s.from=t,s.to=e,s.callback=i,go.intersectWorld(this,s)}raycastAny(t,e,s={},i){return s.mode=Y.ANY,s.from=t,s.to=e,s.result=i,go.intersectWorld(this,s)}raycastClosest(t,e,s={},i){return s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=i,go.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof F&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0,i=e.length;s<i;s++){const i=e[s].shapes;for(let e=0,s=i.length;e<s;e++){const s=i[e];if(s.id===t)return s}}}addMaterial(t){this.materials.push(t)}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}step(t,e,s=10){if(void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=xo.now();let o=0;for(;this.accumulator>=t&&o<s&&(this.internalStep(t),this.accumulator-=t,o++,!(xo.now()-i>2*t*1e3)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,n,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,n,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=zo,i=Fo,o=this.numObjects(),n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,c=this.profile,h=F.DYNAMIC;let u=-1/0;const d=this.constraints,p=So,y=(a.length(),a.x),m=a.y,v=a.z;let w=0;for(l&&(u=xo.now()),w=0;w!==o;w++){const t=n[w];if(t.type===h){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*m,e.z+=s*v}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=xo.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(c.broadphase=xo.now()-u);let f=d.length;for(w=0;w!==f;w++){const t=d[w];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=xo.now());const g=Eo,x=e.length;for(w=0;w!==x;w++)g.push(e[w]);e.length=0;const b=this.frictionEquations.length;for(w=0;w!==b;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(c.narrowphase=xo.now()-u),l&&(u=xo.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const A=e.length;for(let t=0;t!==A;t++){const s=e[t],i=s.bi,o=s.bj,n=s.si,a=s.sj;let l;l=i.material&&o.material&&this.getContactMaterial(i.material,o.material)||this.defaultContactMaterial;let c=l.friction;if(i.material&&o.material&&(i.material.friction>=0&&o.material.friction>=0&&(c=i.material.friction*o.material.friction),i.material.restitution>=0&&o.material.restitution>=0&&(s.restitution=i.material.restitution*o.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===F.DYNAMIC&&i.sleepState===F.SLEEPING&&o.sleepState===F.AWAKE&&o.type!==F.STATIC){o.velocity.lengthSquared()+o.angularVelocity.lengthSquared()>=2*o.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(o.allowSleep&&o.type===F.DYNAMIC&&o.sleepState===F.SLEEPING&&i.sleepState===F.AWAKE&&i.type!==F.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(o.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,o,!0),this.collisionMatrixPrevious.get(i,o)||(Bo.body=o,Bo.contact=s,i.dispatchEvent(Bo),Bo.body=i,o.dispatchEvent(Bo)),this.bodyOverlapKeeper.set(i.id,o.id),this.shapeOverlapKeeper.set(n.id,a.id)}for(this.emitContactEvents(),l&&(c.makeContactConstraints=xo.now()-u,u=xo.now()),w=0;w!==o;w++){const t=n[w];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=d.length,w=0;w!==f;w++){const t=d[w];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(c.solve=xo.now()-u),r.removeAllEquations();const B=Math.pow;for(w=0;w!==o;w++){const e=n[w];if(e.type&h){const s=B(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const o=e.angularVelocity;if(o){const s=B(1-e.angularDamping,t);o.scale(s,o)}}}for(this.dispatchEvent(Ao),w=0;w!==o;w++){const t=n[w];t.preStep&&t.preStep.call(t)}l&&(u=xo.now());const E=this.stepnumber%(this.quatNormalizeSkip+1)==0,S=this.quatNormalizeFast;for(w=0;w!==o;w++)n[w].integrate(t,E,S);for(this.clearForces(),this.broadphase.dirty=!0,l&&(c.integrate=xo.now()-u),this.time+=t,this.stepnumber+=1,this.dispatchEvent(bo),w=0;w!==o;w++){const t=n[w],e=t.postStep;e&&e.call(t)}let z=!0;if(this.allowSleep)for(z=!1,w=0;w!==o;w++){const t=n[w];t.sleepTick(this.time),t.sleepState!==F.SLEEPING&&(z=!0)}this.hasActiveBodies=z}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque;e.force.set(0,0,0),e.torque.set(0,0,0)}}}new a;const go=new Y,xo=globalThis.performance||{};if(!xo.now){let t=Date.now();xo.timing&&xo.timing.navigationStart&&(t=xo.timing.navigationStart),xo.now=()=>Date.now()-t}const bo={type:"postStep"},Ao={type:"preStep"},Bo={type:F.COLLIDE_EVENT_NAME,body:null,contact:null},Eo=[],So=[],zo=[],Fo=[];fo.prototype.emitContactEvents=(()=>{const t=[],e=[],s={type:"beginContact",bodyA:null,bodyB:null},i={type:"endContact",bodyA:null,bodyB:null},o={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},n={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};return function(){const r=this.hasAnyEventListener("beginContact"),a=this.hasAnyEventListener("endContact");if((r||a)&&this.bodyOverlapKeeper.getDiff(t,e),r){for(let e=0,i=t.length;e<i;e+=2)s.bodyA=this.getBodyById(t[e]),s.bodyB=this.getBodyById(t[e+1]),this.dispatchEvent(s);s.bodyA=s.bodyB=null}if(a){for(let t=0,s=e.length;t<s;t+=2)i.bodyA=this.getBodyById(e[t]),i.bodyB=this.getBodyById(e[t+1]),this.dispatchEvent(i);i.bodyA=i.bodyB=null}t.length=e.length=0;const l=this.hasAnyEventListener("beginShapeContact"),c=this.hasAnyEventListener("endShapeContact");if((l||c)&&this.shapeOverlapKeeper.getDiff(t,e),l){for(let e=0,s=t.length;e<s;e+=2){const s=this.getShapeById(t[e]),i=this.getShapeById(t[e+1]);o.shapeA=s,o.shapeB=i,o.bodyA=s.body,o.bodyB=i.body,this.dispatchEvent(o)}o.bodyA=o.bodyB=o.shapeA=o.shapeB=null}if(c){for(let t=0,s=e.length;t<s;t+=2){const s=this.getShapeById(e[t]),i=this.getShapeById(e[t+1]);n.shapeA=s,n.shapeB=i,n.bodyA=s.body,n.bodyB=i.body,this.dispatchEvent(n)}n.bodyA=n.bodyB=n.shapeA=n.shapeB=null}}})();let Co={};const Mo={},Ro={},Io={},To=new fo,qo={step:1/60},Lo={},Po=new i;function No(t,e){switch(t){case"Box":return new b(new i(...e.map(t=>t/2)));case"ConvexPolyhedron":const[t,s,o]=e;return new f({vertices:t.map(([t,e,s])=>new i(t,e,s)),normals:o?o.map(([t,e,s])=>new i(t,e,s)):null,faces:s});case"Cylinder":return new Ze(...e);case"Heightfield":return new $e(...e);case"Particle":return new Ke;case"Plane":return new Qe;case"Sphere":return new Ye(...e);case"Trimesh":return new ys(...e)}}function Wo(){self.postMessage({op:"sync",bodies:To.bodies.map(t=>t.uuid)}),Co=To.bodies.reduce((e,s)=>t({},e,{[s.uuid]:s}),{})}self.onmessage=s=>{const{op:o,uuid:n,type:r,positions:a,quaternions:l,props:c}=s.data;switch(o){case"init":{const{gravity:t,tolerance:e,step:s,iterations:i,allowSleep:o,broadphase:n,axisIndex:r,defaultContactMaterial:a}=c,l={NaiveBroadphase:G,SAPBroadphase:Et};To.allowSleep=o,To.gravity.set(t[0],t[1],t[2]),To.solver.tolerance=e,To.solver.iterations=i,To.broadphase=new(l[n+"Broadphase"]||G)(To),To.broadphase.axisIndex=null!=r?r:0,Object.assign(To.defaultContactMaterial,a),qo.step=s;break}case"step":{To.step(qo.step);const t=To.bodies.length;for(let e=0;e<t;e++){let t=To.bodies[e],s=t.position,i=t.quaternion;a[3*e+0]=s.x,a[3*e+1]=s.y,a[3*e+2]=s.z,l[4*e+0]=i.x,l[4*e+1]=i.y,l[4*e+2]=i.z,l[4*e+3]=i.w}const e=[];for(const t of Object.keys(Lo)){const[s,o]=Lo[t];let n=Co[s][o];n instanceof i?n=n.toArray():n instanceof d&&(n.toEuler(Po),n=Po.toArray()),e.push([t,n])}self.postMessage({op:"frame",positions:a,quaternions:l,observations:e,active:To.hasActiveBodies},[a.buffer,l.buffer]);break}case"addBodies":for(let s=0;s<n.length;s++){const o=c[s],{args:a=[],position:l=[0,0,0],rotation:h=[0,0,0],scale:u=[1,1,1],velocity:p=[0,0,0],angularVelocity:y=[0,0,0],linearFactor:m=[1,1,1],angularFactor:v=[1,1,1],type:w,mass:f,material:g,shapes:x,onCollide:b}=o,A=e(o,["args","position","rotation","scale","velocity","angularVelocity","linearFactor","angularFactor","type","mass","material","shapes","onCollide"]),B=new F(t({},A,{mass:"Static"===w?0:f,type:w?F[w.toUpperCase()]:void 0,material:g?new le(g):void 0}));B.uuid=n[s],"Compound"===r?x.forEach(t=>{let{type:s,args:o,position:n,rotation:r,material:a}=t,l=e(t,["type","args","position","rotation","material"]);const c=B.addShape(No(s,o),n?new i(...n):void 0,r?(new d).setFromEuler(...r):void 0);a&&(c.material=new le(a)),Object.assign(c,l)}):B.addShape(No(r,a)),B.position.set(l[0],l[1],l[2]),B.quaternion.setFromEuler(h[0],h[1],h[2]),B.velocity.set(p[0],p[1],p[2]),B.angularVelocity.set(y[0],y[1],y[2]),B.linearFactor.set(m[0],m[1],m[2]),B.angularFactor.set(v[0],v[1],v[2]),To.addBody(B),b&&B.addEventListener("collide",({type:t,body:e,target:s,contact:i})=>{const{ni:o,ri:n,rj:r}=i;self.postMessage({op:"event",type:t,body:e.uuid,target:s.uuid,contact:{ni:o.toArray(),ri:n.toArray(),rj:r.toArray(),impactVelocity:i.getImpactVelocityAlongNormal()},collisionFilters:{bodyFilterGroup:e.collisionFilterGroup,bodyFilterMask:e.collisionFilterMask,targetFilterGroup:s.collisionFilterGroup,targetFilterMask:s.collisionFilterMask}})})}Wo();break;case"removeBodies":for(let t=0;t<n.length;t++)To.removeBody(Co[n[t]]);Wo();break;case"subscribe":{const{id:t,type:e}=c;Lo[t]=[n,e];break}case"unsubscribe":delete Lo[c];break;case"setPosition":Co[n].position.set(c[0],c[1],c[2]);break;case"setQuaternion":Co[n].quaternion.setFromEuler(c[0],c[1],c[2]);break;case"setVelocity":Co[n].velocity.set(c[0],c[1],c[2]);break;case"setAngularVelocity":Co[n].angularVelocity.set(c[0],c[1],c[2]);break;case"setLinearFactor":Co[n].linearFactor.set(c[0],c[1],c[2]);break;case"setAngularFactor":Co[n].angularFactor.set(c[0],c[1],c[2]);break;case"setMass":Co[n].mass=c;break;case"setLinearDamping":Co[n].linearDamping=c;break;case"setAngularDamping":Co[n].angularDamping=c;break;case"setAllowSleep":Co[n].allowSleep=c;break;case"setSleepSpeedLimit":Co[n].sleepSpeedLimit=c;break;case"setSleepTimeLimit":Co[n].sleepTimeLimit=c;break;case"setCollisionFilterGroup":Co[n].collisionFilterGroup=c;break;case"setCollisionFilterMask":case"setCollisionFilterMask":Co[n].collisionFilterMask=c;break;case"setFixedRotation":Co[n].fixedRotation=c;break;case"applyForce":Co[n].applyForce(new i(...c[0]),new i(...c[1]));break;case"applyImpulse":Co[n].applyImpulse(new i(...c[0]),new i(...c[1]));break;case"applyLocalForce":Co[n].applyLocalForce(new i(...c[0]),new i(...c[1]));break;case"applyLocalImpulse":Co[n].applyLocalImpulse(new i(...c[0]),new i(...c[1]));break;case"addConstraint":{const[s,o,a]=c;let l,{pivotA:h,pivotB:u,axisA:d,axisB:p}=a,y=e(a,["pivotA","pivotB","axisA","axisB"]);switch(h=Array.isArray(h)?new i(...h):void 0,u=Array.isArray(u)?new i(...u):void 0,d=Array.isArray(d)?new i(...d):void 0,p=Array.isArray(p)?new i(...p):void 0,r){case"PointToPoint":l=new Ht(Co[s],h,Co[o],u,a.maxForce);break;case"ConeTwist":l=new Qt(Co[s],Co[o],t({pivotA:h,pivotB:u,axisA:d,axisB:p},y));break;case"Hinge":l=new ee(Co[s],Co[o],t({pivotA:h,pivotB:u,axisA:d,axisB:p},y));break;case"Distance":l=new Jt(Co[s],Co[o],a.distance,a.maxForce);break;case"Lock":l=new $t(Co[s],Co[o],a);break;default:l=new zt(Co[s],Co[o],a)}l.uuid=n,To.addConstraint(l);break}case"removeConstraint":To.constraints.filter(({uuid:t})=>t===n).map(t=>To.removeConstraint(t));break;case"enableConstraint":To.constraints.filter(({uuid:t})=>t===n).map(t=>t.enable());break;case"disableConstraint":To.constraints.filter(({uuid:t})=>t===n).map(t=>t.disable());break;case"addSpring":{const[t,e,s]=c;let{worldAnchorA:o,worldAnchorB:r,localAnchorA:a,localAnchorB:l,restLength:h,stiffness:u,damping:d}=s;o=Array.isArray(o)?new i(...o):void 0,r=Array.isArray(r)?new i(...r):void 0,a=Array.isArray(a)?new i(...a):void 0,l=Array.isArray(l)?new i(...l):void 0;let p=new ce(Co[t],Co[e],{worldAnchorA:o,worldAnchorB:r,localAnchorA:a,localAnchorB:l,restLength:h,stiffness:u,damping:d});p.uuid=n;let y=t=>p.applyForce();Ro[n]=y,To.addEventListener("postStep",Ro[n]);break}case"removeSpring":To.removeEventListener("postStep",Ro[n]);break;case"addRay":{const{from:s,to:o}=c,r=e(c,["from","to"]),a=new Y(s?new i(...s):void 0,o?new i(...o):void 0);r.mode=Y[r.mode.toUpperCase()],r.result=new X,Io[n]=()=>{a.intersectWorld(To,r);const i=r.result,{body:l,shape:c,rayFromWorld:h,rayToWorld:u,hitNormalWorld:d,hitPointWorld:p}=i,y=e(i,["body","shape","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld"]);self.postMessage(t({op:"event",type:"rayhit",ray:{from:s,to:o,direction:a.direction.toArray(),collisionFilterGroup:a.collisionFilterGroup,collisionFilterMask:a.collisionFilterMask,uuid:n},body:l?l.uuid:null,shape:c?t({},c,{body:l.uuid}):null,rayFromWorld:h.toArray(),rayToWorld:u.toArray(),hitNormalWorld:d.toArray(),hitPointWorld:p.toArray()},y))},To.addEventListener("preStep",Io[n]);break}case"removeRay":To.removeEventListener("preStep",Io[n]),delete Io[n];break;case"addRaycastVehicle":{const[t,e,s,o,r,a]=c,l=new Ee({chassisBody:Co[t],indexForwardAxis:o,indexRightAxis:r,indexUpAxis:a});l.world=To;for(let t=0;t<s.length;t++){const o=s[t];o.directionLocal=new i(...o.directionLocal),o.chassisConnectionPointLocal=new i(...o.chassisConnectionPointLocal),o.axleLocal=new i(...o.axleLocal),l.addWheel(o);Co[e[t]]}Mo[n]={vehicle:l,wheels:e,preStep:()=>{Mo[n].vehicle.updateVehicle(To.dt)},postStep:()=>{for(let t=0;t<Mo[n].vehicle.wheelInfos.length;t++){Mo[n].vehicle.updateWheelTransform(t);const e=Mo[n].vehicle.wheelInfos[t].worldTransform,s=Co[Mo[n].wheels[t]];s.position.copy(e.position),s.quaternion.copy(e.quaternion)}}},To.addEventListener("preStep",Mo[n].preStep),To.addEventListener("postStep",Mo[n].postStep);break}case"removeRaycastVehicle":To.removeEventListener("preStep",Mo[n].preStep),To.removeEventListener("postStep",Mo[n].postStep),Mo[n].vehicle.world=null,Mo[n].vehicle=null,delete Mo[n];break;case"setRaycastVehicleSteeringValue":{const[t,e]=c;Mo[n].vehicle.setSteeringValue(t,e);break}case"applyRaycastVehicleEngineForce":{const[t,e]=c;Mo[n].vehicle.applyEngineForce(t,e);break}case"setRaycastVehicleBrake":{const[t,e]=c;Mo[n].vehicle.setBrake(t,e);break}}};

'),
    (l =
      'data:application/json;charset=utf-8;base64,{"version":3,"file":"worker.js","sources":["worker://web-worker/src/node_modules/cannon-es/dist/cannon-es.js","worker://web-worker/src/worker.js"],"sourcesContent":["/**\r\n * Records what objects are colliding with each other\r\n * @class ObjectCollisionMatrix\r\n * @constructor\r\n */\nclass ObjectCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = {};\n  }\n  /**\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {boolean}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i + \"-\" + j in this.matrix;\n  }\n  /**\r\n   * @method set\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[i + \"-\" + j] = true;\n    } else {\n      delete this.matrix[i + \"-\" + j];\n    }\n  }\n  /**\r\n   * Empty the matrix\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\r\n   * Set max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\r\n * A 3x3 matrix.\r\n * @class Mat3\r\n * @constructor\r\n * @param {Array} elements A vector of length 9, containing all matrix elements. Optional.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Mat3 {\n  constructor(elements = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.elements = elements;\n  }\n  /**\r\n   * Sets the matrix to identity\r\n   * @method identity\r\n   * @todo Should perhaps be renamed to setIdentity() to be more clear.\r\n   * @todo Create another function that immediately creates an identity matrix eg. eye()\r\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\r\n   * Set all elements to zero\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\r\n   * Sets the matrix diagonal elements from a Vec3\r\n   * @method setTrace\r\n   * @param {Vec3} vec3\r\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\r\n   * Gets the matrix diagonal elements\r\n   * @method getTrace\r\n   * @return {Vec3}\r\n   */\n\n\n  getTrace(target = new Vec3()) {\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n  }\n  /**\r\n   * Matrix-Vector multiplication\r\n   * @method vmult\r\n   * @param {Vec3} v The vector to multiply with\r\n   * @param {Vec3} target Optional, target to save the result in.\r\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\r\n   * Matrix-scalar multiplication\r\n   * @method smult\r\n   * @param {Number} s\r\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\r\n   * Matrix multiplication\r\n   * @method mmult\r\n   * @param {Mat3} matrix Matrix to multiply with from left side.\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  mmult(matrix, target = new Mat3()) {\n    const {\n      elements\n    } = matrix;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let sum = 0.0;\n\n        for (let k = 0; k < 3; k++) {\n          sum += elements[i + k * 3] * this.elements[k + j * 3];\n        }\n\n        target.elements[i + j * 3] = sum;\n      }\n    }\n\n    return target;\n  }\n  /**\r\n   * Scale each column of the matrix\r\n   * @method scale\r\n   * @param {Vec3} v\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  scale(vector, target = new Mat3()) {\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\r\n   * Solve Ax=b\r\n   * @method solve\r\n   * @param {Vec3} b The right hand side\r\n   * @param {Vec3} target Optional. Target vector to save in.\r\n   * @return {Vec3} The solution x\r\n   * @todo should reuse arrays\r\n   */\n\n\n  solve(b, target = new Vec3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw \"Could not solve equation! Got x=[\" + target.toString() + \"], b=[\" + b.toString() + \"], A=[\" + this.toString() + \"]\";\n    }\n\n    return target;\n  }\n  /**\r\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\r\n   * @method e\r\n   * @param {Number} row\r\n   * @param {Number} column\r\n   * @param {Number} value Optional. If provided, the matrix element will be set to this value.\r\n   * @return {Number}\r\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\r\n   * Copy another matrix into this matrix object.\r\n   * @method copy\r\n   * @param {Mat3} source\r\n   * @return {Mat3} this\r\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns a string representation of the matrix.\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\r\n   * reverse the matrix\r\n   * @method reverse\r\n   * @param {Mat3} target Optional. Target matrix to save in.\r\n   * @return {Mat3} The solution x\r\n   */\n\n\n  reverse(target = new Mat3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw \"Could not reverse! A=[\" + this.toString() + \"]\";\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\r\n   * Set the matrix from a quaterion\r\n   * @method setRotationFromQuaternion\r\n   * @param {Quaternion} q\r\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\r\n   * Transpose the matrix\r\n   * @method transpose\r\n   * @param  {Mat3} target Optional. Where to store the result.\r\n   * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\r\n   */\n\n\n  transpose(target = new Mat3()) {\n    const Mt = target.elements;\n    const M = this.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      for (let j = 0; j !== 3; j++) {\n        Mt[3 * i + j] = M[3 * j + i];\n      }\n    }\n\n    return target;\n  }\n\n}\n\n/**\r\n * 3-dimensional vector\r\n * @class Vec3\r\n * @constructor\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} z\r\n * @author schteppe\r\n * @example\r\n *     const v = new Vec3(1, 2, 3);\r\n *     console.log('x=' + v.x); // x=1\r\n */\n\nclass Vec3 {\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\r\n   * Vector cross product\r\n   * @method cross\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  cross(vector, target = new Vec3()) {\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\r\n   * Set the vectors' 3 elements\r\n   * @method set\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} z\r\n   * @return Vec3\r\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\r\n   * Set all components of the vector to zero.\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\r\n   * Vector addition\r\n   * @method vadd\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional.\r\n   * @return {Vec3}\r\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\r\n   * Vector subtraction\r\n   * @method vsub\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\r\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\r\n   * @method crossmat\r\n   * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\r\n   * @return {Mat3}\r\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\r\n   * Normalize the vector. Note that this changes the values in the vector.\r\n   * @method normalize\r\n   * @return {Number} Returns the norm of the vector\r\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\r\n   * Get the version of this vector that is of length 1.\r\n   * @method unit\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3} Returns the unit vector\r\n   */\n\n\n  unit(target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\r\n   * Get the length of the vector\r\n   * @method length\r\n   * @return {Number}\r\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\r\n   * Get the squared length of the vector.\r\n   * @method lengthSquared\r\n   * @return {Number}\r\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\r\n   * Get distance from this point to another point\r\n   * @method distanceTo\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\r\n   * Get squared distance from this point to another point\r\n   * @method distanceSquared\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\r\n   * Multiply all the components of the vector with a scalar.\r\n   * @method scale\r\n   * @param {Number} scalar\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  scale(scalar, target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\r\n   * Multiply the vector with an other vector, component-wise.\r\n   * @method vmult\r\n   * @param {Number} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vmul(vector, target = new Vec3()) {\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\r\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\r\n   * @method addScaledVector\r\n   * @param {Number} scalar\r\n   * @param {Vec3} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  addScaledVector(scalar, vector, target = new Vec3()) {\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\r\n   * Calculate dot product\r\n   * @method dot\r\n   * @param {Vec3} v\r\n   * @return {Number}\r\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n  /**\r\n   * @method isZero\r\n   * @return bool\r\n   */\n\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\r\n   * Make the vector point in the opposite direction.\r\n   * @method negate\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3}\r\n   */\n\n\n  negate(target = new Vec3()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\r\n   * Compute two artificial tangents to the vector\r\n   * @method tangents\r\n   * @param {Vec3} t1 Vector object to save the first tangent in\r\n   * @param {Vec3} t2 Vector object to save the second tangent in\r\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\r\n   * Converts to a more readable format\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z;\n  }\n  /**\r\n   * Converts to an array\r\n   * @method toArray\r\n   * @return Array\r\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\r\n   * Copies value of source to this vector.\r\n   * @method copy\r\n   * @param {Vec3} source\r\n   * @return {Vec3} this\r\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\r\n   * Do a linear interpolation between two vectors\r\n   * @method lerp\r\n   * @param {Vec3} v\r\n   * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\r\n   * @param {Vec3} target\r\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\r\n   * Check if a vector equals is almost equal to another one.\r\n   * @method almostEquals\r\n   * @param {Vec3} v\r\n   * @param {Number} precision\r\n   * @return bool\r\n   */\n\n\n  almostEquals(vector, precision = 1e-6) {\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if a vector is almost zero\r\n   * @method almostZero\r\n   * @param {Number} precision\r\n   */\n\n\n  almostZero(precision = 1e-6) {\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if the vector is anti-parallel to another vector.\r\n   * @method isAntiparallelTo\r\n   * @param  {Vec3}  v\r\n   * @param  {Number}  precision Set to zero for exact comparisons\r\n   * @return {Boolean}\r\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\r\n   * Clone the vector\r\n   * @method clone\r\n   * @return {Vec3}\r\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n/**\r\n * Compute two artificial tangents to the vector\r\n * @method tangents\r\n * @param {Vec3} t1 Vector object to save the first tangent in\r\n * @param {Vec3} t2 Vector object to save the second tangent in\r\n */\n\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\r\n * Axis aligned bounding box class.\r\n * @class AABB\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Vec3}   [options.upperBound] The upper bound of the bounding box.\r\n * @param {Vec3}   [options.lowerBound] The lower bound of the bounding box\r\n */\nclass AABB {\n  // The lower bound of the bounding box\n  // The upper bound of the bounding box\n  constructor(options = {}) {\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\r\n   * Set the AABB bounds from a set of points.\r\n   * @method setFromPoints\r\n   * @param {Array} points An array of Vec3's.\r\n   * @param {Vec3} position Optional.\r\n   * @param {Quaternion} quaternion Optional.\r\n   * @param {number} skinSize Optional.\r\n   * @return {AABB} The self object\r\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp);\n        p = tmp;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\r\n   * Copy bounds from an AABB to this AABB\r\n   * @method copy\r\n   * @param  {AABB} aabb Source to copy from\r\n   * @return {AABB} The this object, for chainability\r\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\r\n   * Clone an AABB\r\n   * @method clone\r\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\r\n   * Extend this AABB so that it covers the given AABB too.\r\n   * @method extend\r\n   * @param  {AABB} aabb\r\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\r\n   * Returns true if the given AABB overlaps this AABB.\r\n   * @method overlaps\r\n   * @param  {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\r\n   * Returns true if the given AABB is fully contained in this AABB.\r\n   * @method contains\r\n   * @param {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n  /**\r\n   * @method getCorners\r\n   * @param {Vec3} a\r\n   * @param {Vec3} b\r\n   * @param {Vec3} c\r\n   * @param {Vec3} d\r\n   * @param {Vec3} e\r\n   * @param {Vec3} f\r\n   * @param {Vec3} g\r\n   * @param {Vec3} h\r\n   */\n\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\r\n   * Get the representation of an AABB in another frame.\r\n   * @method toLocalFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Get the representation of an AABB in the global frame.\r\n   * @method toWorldFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Check if the AABB is hit by a ray.\r\n   * @param  {Ray} ray\r\n   * @return {Boolean}\r\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray;\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\r\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\r\n * @class ArrayCollisionMatrix\r\n * @constructor\r\n */\nclass ArrayCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = [];\n  }\n  /**\r\n   * Get an element\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {Number}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\r\n   * Set an element\r\n   * @method set\r\n   * @param {Body} i\r\n   * @param {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\r\n   * Sets all elements to zero\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\r\n   * Sets the max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\r\n * Base class for objects that dispatches events.\r\n * @class EventTarget\r\n * @constructor\r\n */\nclass EventTarget {\n  constructor() {}\n  /**\r\n   * Add an event listener\r\n   * @method addEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\r\n   * Check if an event listener is added\r\n   * @method hasEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {Boolean}\r\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Check if any event listener of the given type is added\r\n   * @method hasAnyEventListener\r\n   * @param  {String} type\r\n   * @return {Boolean}\r\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\r\n   * Remove an event listener\r\n   * @method removeEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\r\n   * Emit an event.\r\n   * @method dispatchEvent\r\n   * @param  {Object} event\r\n   * @param  {String} event.type\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\r\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\r\n * @param {Number} x Multiplier of the imaginary basis vector i.\r\n * @param {Number} y Multiplier of the imaginary basis vector j.\r\n * @param {Number} z Multiplier of the imaginary basis vector k.\r\n * @param {Number} w Multiplier of the real part.\r\n * @see http://en.wikipedia.org/wiki/Quaternion\r\n */\n\nclass Quaternion {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\r\n   * Set the value of the quaternion.\r\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\r\n   * Convert to a readable format\r\n   * @return {String} \"x,y,z,w\"\r\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w;\n  }\n  /**\r\n   * Convert to an Array\r\n   * @return {Array} [x, y, z, w]\r\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\r\n   * Set the quaternion components given an axis and an angle in radians.\r\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\r\n   * Converts the quaternion to [ axis, angle ] representation.\r\n   * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.\r\n   * @return {Array} An array, first element is the axis and the second is the angle in radians.\r\n   */\n\n\n  toAxisAngle(targetAxis = new Vec3()) {\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\r\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\r\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\r\n   * Multiply the quaternion with an other quaternion.\r\n   */\n\n\n  mult(quat, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\r\n   * Get the inverse quaternion rotation.\r\n   */\n\n\n  inverse(target = new Quaternion()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\r\n   * Get the quaternion conjugate\r\n   */\n\n\n  conjugate(target = new Quaternion()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\r\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\r\n   * @method normalize\r\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\r\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\r\n   * @see http://jsperf.com/fast-quaternion-normalization\r\n   * @author unphased, https://github.com/unphased\r\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\r\n   * Multiply the quaternion by a vector\r\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\r\n   * Copies value of source to this quaternion.\r\n   * @method copy\r\n   * @param {Quaternion} source\r\n   * @return {Quaternion} this\r\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\r\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\r\n   * @method toEuler\r\n   * @param {Vec3} target\r\n   * @param {String} order Three-character string, defaults to \"YZX\"\r\n   */\n\n\n  toEuler(target, order = 'YZX') {\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Euler order \" + order + \" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} z\r\n   * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\r\n   * @see http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\r\n   */\n\n\n  setFromEuler(x, y, z, order = 'XYZ') {\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n  /**\r\n   * @method clone\r\n   * @return {Quaternion}\r\n   */\n\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\r\n   * Performs a spherical linear interpolation between two quat\r\n   *\r\n   * @param {Quaternion} toQuat second operand\r\n   * @param {Number} t interpolation amount between the self quaternion and toQuat\r\n   * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.\r\n   * @returns {Quaternion} The \"target\" object\r\n   */\n\n\n  slerp(toQuat, t, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\r\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\r\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target = new Quaternion()) {\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\nconst SHAPE_TYPES = {\n  SPHERE: 1,\n  PLANE: 2,\n  BOX: 4,\n  COMPOUND: 8,\n  CONVEXPOLYHEDRON: 16,\n  HEIGHTFIELD: 32,\n  PARTICLE: 64,\n  CYLINDER: 128,\n  TRIMESH: 256\n};\n\n/**\r\n * Base class for shapes\r\n * @class Shape\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {number} [options.collisionFilterGroup=1]\r\n * @param {number} [options.collisionFilterMask=-1]\r\n * @param {number} [options.collisionResponse=true]\r\n * @param {number} [options.material=null]\r\n * @author schteppe\r\n */\nclass Shape {\n  // Identifyer of the Shape.\n  // The type of this shape. Must be set to an int > 0 by subclasses.\n  // The local bounding sphere radius of this shape.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n  constructor(options = {}) {\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\r\n   * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\r\n   * @method updateBoundingSphereRadius\r\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw \"computeBoundingSphereRadius() not implemented for shape type \" + this.type;\n  }\n  /**\r\n   * Get the volume of this shape\r\n   * @method volume\r\n   * @return {Number}\r\n   */\n\n\n  volume() {\n    throw \"volume() not implemented for shape type \" + this.type;\n  }\n  /**\r\n   * Calculates the inertia in the local frame for this shape.\r\n   * @method calculateLocalInertia\r\n   * @param {Number} mass\r\n   * @param {Vec3} target\r\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\r\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw \"calculateLocalInertia() not implemented for shape type \" + this.type;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw \"calculateWorldAABB() not implemented for shape type \" + this.type;\n  }\n\n}\nShape.idCounter = 0;\n/**\r\n * The available shape types.\r\n * @static\r\n * @property types\r\n * @type {Object}\r\n */\n\nShape.types = SHAPE_TYPES;\n\nclass Transform {\n  constructor(options = {}) {\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\r\n   * Get a global point in local transform coordinates.\r\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\r\n   * Get a local point in global transform coordinates.\r\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result = new Vec3()) {\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n  }\n\n  static pointToWorldFrame(position, quaternion, localPoint, result = new Vec3()) {\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n\n  static vectorToWorldFrame(quaternion, localVector, result = new Vec3()) {\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result = new Vec3()) {\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat = new Quaternion();\n\n/**\r\n * A set of polygons describing a convex shape.\r\n * @class ConvexPolyhedron\r\n * @constructor\r\n * @extends Shape\r\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\r\n * in the same 3D plane), instead these should be merged into one polygon.\r\n *\r\n * @param {array} points An array of Vec3's\r\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\r\n *\r\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\r\n * @author schteppe / https://github.com/schteppe\r\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\r\n *\r\n * @todo Move the clipping functions to ContactGenerator?\r\n * @todo Automatically merge coplanar polygons in constructor.\r\n */\nclass ConvexPolyhedron extends Shape {\n  // Array of integer arrays, indicating which vertices each face consists of\n  // If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n  constructor(props = {}) {\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\r\n   * Computes uniqueEdges\r\n   * @method computeEdges\r\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\r\n   * @method computeNormals\r\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(\"Vertex \" + this.faces[i][j] + \" not found!\");\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(\".faceNormals[\" + i + \"] = Vec3(\" + n.toString() + \") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(\".vertices[\" + this.faces[i][j] + \"] = Vec3(\" + this.vertices[this.faces[i][j]].toString() + \")\");\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normal of a face from its vertices\r\n   * @method getFaceNormal\r\n   * @param  {Number} i\r\n   * @param  {Vec3} target\r\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\r\n   * @method clipAgainstHull\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Number} minDist Clamp distance\r\n   * @param {Number} maxDist\r\n   * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\r\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\r\n   * Find the separating axis between this hull and another\r\n   * @method findSeparatingAxis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} target The target vector to save the axis in\r\n   * @return {bool} Returns false if a separation is found, else true\r\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\r\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\r\n   * @method testSepAxis\r\n   * @param {Vec3} axis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @return {number} The overlap depth, or FALSE if no penetration.\r\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\r\n   * @method getPlaneConstantOfFace\r\n   * @param  {Number} face_i Index of the face\r\n   * @return {Number}\r\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\r\n   * Clip a face against a hull.\r\n   * @method clipFaceAgainstHull\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\r\n   * @param {Number} minDist Distance clamping\r\n   * @param {Number} maxDist\r\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\r\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(\"clamped: depth=\" + depth + \" to minDist=\" + minDist);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\r\n   * Clip a face in a hull against the back of a plane.\r\n   * @method clipFaceAgainstPlane\r\n   * @param {Array} inVertices\r\n   * @param {Array} outVertices\r\n   * @param {Vec3} planeNormal\r\n   * @param {Number} planeConstant The constant in the mathematical plane equation\r\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  } // Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\r\n   * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\r\n   * @method computeWorldFaceNormals\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\r\n   * @method updateBoundingSphereRadius\r\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\r\n   * @method calculateWorldAABB\r\n   * @param {Vec3}        pos\r\n   * @param {Quaternion}  quat\r\n   * @param {Vec3}        min\r\n   * @param {Vec3}        max\r\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\r\n   * Get approximate convex volume\r\n   * @method volume\r\n   * @return {Number}\r\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\r\n   * Get an average of all the vertices positions\r\n   * @method getAveragePointLocal\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  getAveragePointLocal(target = new Vec3()) {\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\r\n   * Transform all local points. Will change the .vertices\r\n   * @method transformAllPoints\r\n   * @param  {Vec3} offset\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\r\n            // Rotate edges\r\n            for(let i=0; i<this.uniqueEdges.length; i++){\r\n                const v = this.uniqueEdges[i];\r\n                quat.vmult(v,v);\r\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\r\n   * Checks whether p is inside the polyhedra. Must be in local coords.\r\n   * The point lies outside of the convex hull of the other points if and only if the direction\r\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\r\n   * @method pointIsInside\r\n   * @param  {Vec3} p      A point given in local coordinates\r\n   * @return {Boolean}\r\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return  -1;\n  }\n\n}\n/**\r\n * Get face normal given 3 vertices\r\n * @static\r\n * @method computeNormal\r\n * @param {Vec3} va\r\n * @param {Vec3} vb\r\n * @param {Vec3} vc\r\n * @param {Vec3} target\r\n */\n\nConvexPolyhedron.computeNormal = (va, vb, vc, target) => {\n  const cb = new Vec3();\n  const ab = new Vec3();\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst maxminA = [];\nconst maxminB = [];\n/**\r\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\r\n * Results are saved in the array maxmin.\r\n * @static\r\n * @method project\r\n * @param {ConvexPolyhedron} hull\r\n * @param {Vec3} axis\r\n * @param {Vec3} pos\r\n * @param {Quaternion} quat\r\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\r\n */\n\nConvexPolyhedron.project = (shape, axis, pos, quat, result) => {\n  const n = shape.vertices.length;\n  const localAxis = new Vec3();\n  let max = 0;\n  let min = 0;\n  const localOrigin = new Vec3();\n  const vs = shape.vertices;\n  localOrigin.setZero(); // Transform the axis to local\n\n  Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n  Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n  const add = localOrigin.dot(localAxis);\n  min = max = vs[0].dot(localAxis);\n\n  for (let i = 1; i < n; i++) {\n    const val = vs[i].dot(localAxis);\n\n    if (val > max) {\n      max = val;\n    }\n\n    if (val < min) {\n      min = val;\n    }\n  }\n\n  min -= add;\n  max -= add;\n\n  if (min > max) {\n    // Inconsistent - swap\n    const temp = min;\n    min = max;\n    max = temp;\n  } // Output\n\n\n  result[0] = max;\n  result[1] = min;\n};\n\n/**\r\n * A 3d box shape.\r\n * @class Box\r\n * @constructor\r\n * @param {Vec3} halfExtents\r\n * @author schteppe\r\n * @extends Shape\r\n */\nclass Box extends Shape {\n  // Used by the contact generator to make contacts with other convex polyhedra for example.\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\r\n   * Updates the local convex polyhedron representation used for some collisions.\r\n   * @method updateConvexPolyhedronRepresentation\r\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n  /**\r\n   * Get the box 6 side normals\r\n   * @method getSideNormals\r\n   * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\r\n   * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\r\n   * @return {array}\r\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\n\nBox.calculateInertia = (halfExtents, mass, target) => {\n  const e = halfExtents;\n  target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n  target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n  target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n};\n\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\nconst BODY_TYPES = {\n  DYNAMIC: 1,\n  STATIC: 2,\n  KINEMATIC: 4\n};\nconst BODY_SLEEP_STATES = {\n  AWAKE: 0,\n  SLEEPY: 1,\n  SLEEPING: 2\n};\n\n/**\r\n * Base class for all body types.\r\n * @class Body\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.position]\r\n * @param {Vec3} [options.velocity]\r\n * @param {Vec3} [options.angularVelocity]\r\n * @param {Quaternion} [options.quaternion]\r\n * @param {number} [options.mass]\r\n * @param {Material} [options.material]\r\n * @param {number} [options.type]\r\n * @param {number} [options.linearDamping=0.01]\r\n * @param {number} [options.angularDamping=0.01]\r\n * @param {boolean} [options.allowSleep=true]\r\n * @param {number} [options.sleepSpeedLimit=0.1]\r\n * @param {number} [options.sleepTimeLimit=1]\r\n * @param {number} [options.collisionFilterGroup=1]\r\n * @param {number} [options.collisionFilterMask=-1]\r\n * @param {boolean} [options.fixedRotation=false]\r\n * @param {Vec3} [options.linearFactor]\r\n * @param {Vec3} [options.angularFactor]\r\n * @param {Shape} [options.shape]\r\n * @example\r\n *     const body = new Body({\r\n *         mass: 1\r\n *     });\r\n *     const shape = new Sphere(1);\r\n *     body.addShape(shape);\r\n *     world.addBody(body);\r\n */\nclass Body extends EventTarget {\n  // Position of body in World.bodies. Updated by World and used in ArrayCollisionMatrix.\n  // Reference to the world the body is living in.\n  // Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled - i.e. \"collide\" events will be raised, but forces will not be altered.\n  // World space position of the body.\n  // Interpolated position of the body.\n  // Initial position of the body.\n  // World space velocity of the body.\n  // Linear force on the body in world space.\n  // One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n  // If true, the body will automatically fall to sleep.\n  // Current sleep state.\n  // If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n  // If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n  // World space rotational force on the body, around center of mass.\n  // World space orientation of the body.\n  // Interpolated orientation of the body.\n  // Angular velocity of the body, in world space. Think of the angular velocity as a vector, which the body rotates around. The length of this vector determines how fast (in radians per second) the body rotates.\n  // Position of each Shape in the body, given in local Body space.\n  // Orientation of each Shape, given in local Body space.\n  // Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n  // Use this property to limit the motion along any world axis. (1,1,1) will allow motion along all axes while (0,0,0) allows none.\n  // Use this property to limit the rotational motion along any world axis. (1,1,1) will allow rotation along all axes while (0,0,0) allows none.\n  // World space bounding box of the body and its shapes.\n  // Indicates if the AABB needs to be updated before use.\n  // Total bounding radius of the Body including its shapes, relative to body.position.\n  constructor(options = {}) {\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.preStep = null;\n    this.postStep = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = 0;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\r\n   * Wake the body up.\r\n   * @method wakeUp\r\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = 0;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\r\n   * Force body sleep\r\n   * @method sleep\r\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\r\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\r\n   * @method sleepTick\r\n   * @param {Number} time The world time in seconds\r\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\r\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\r\n   * @method updateSolveMassProperties\r\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\r\n   * Convert a world point to local body frame.\r\n   * @method pointToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToLocalFrame(worldPoint, result = new Vec3()) {\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\r\n   * Convert a world vector to local body frame.\r\n   * @method vectorToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToLocalFrame(worldVector, result = new Vec3()) {\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method pointToWorldFrame\r\n   * @param  {Vec3} localPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToWorldFrame(localPoint, result = new Vec3()) {\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method vectorToWorldFrame\r\n   * @param  {Vec3} localVector\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\r\n   * Add a shape to the body with a local offset and orientation.\r\n   * @method addShape\r\n   * @param {Shape} shape\r\n   * @param {Vec3} [_offset]\r\n   * @param {Quaternion} [_orientation]\r\n   * @return {Body} The body object, for chainability.\r\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\r\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\r\n   * @method updateBoundingRadius\r\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\r\n   * Updates the .aabb\r\n   * @method computeAABB\r\n   * @todo rename to updateAABB()\r\n   */\n\n\n  computeAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat$1;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = computeAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\r\n   * Update .inertiaWorld and .invInertiaWorld\r\n   * @method updateInertiaWorld\r\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n\n  applyForce(force, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      // Needed?\n      return;\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n\n  applyLocalForce(localForce, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n\n  applyImpulse(impulse, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\r\n     rotVelo.x *= this.invInertia.x;\r\n     rotVelo.y *= this.invInertia.y;\r\n     rotVelo.z *= this.invInertia.z;\r\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\r\n   * Should be called whenever you change the body shape or mass.\r\n   * @method updateMassProperties\r\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.computeAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\r\n   * Get world velocity of a point in the body.\r\n   * @method getVelocityAtWorldPoint\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3} The result vector.\r\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\r\n   * Move the body forward in time.\r\n   * @param {number} dt Time step\r\n   * @param {boolean} quatNormalize Set to true to normalize the body quaternion\r\n   * @param {boolean} quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\r\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\n/**\r\n * Dispatched after two bodies collide. This event is dispatched on each\r\n * of the two bodies involved in the collision.\r\n * @event collide\r\n * @param {Body} body The body that was involved in the collision.\r\n * @param {ContactEquation} contact The details of the collision.\r\n */\n\nBody.COLLIDE_EVENT_NAME = 'collide';\n/**\r\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\r\n * @static\r\n * @property DYNAMIC\r\n * @type {Number}\r\n */\n\nBody.DYNAMIC = 1;\n/**\r\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property STATIC\r\n * @type {Number}\r\n */\n\nBody.STATIC = 2;\n/**\r\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property KINEMATIC\r\n * @type {Number}\r\n */\n\nBody.KINEMATIC = 4;\n/**\r\n * @static\r\n * @property AWAKE\r\n * @type {number}\r\n */\n\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.idCounter = 0;\n/**\r\n * Dispatched after a sleeping body has woken up.\r\n * @event wakeup\r\n */\n\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\n/**\r\n * Dispatched after a body has gone in to the sleepy state.\r\n * @event sleepy\r\n */\n\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\n/**\r\n * Dispatched after a body has fallen asleep.\r\n * @event sleep\r\n */\n\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat$1 = new Quaternion();\nconst computeAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\n/**\r\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\r\n * @method applyForce\r\n * @param  {Vec3} force The amount of force to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyForce_rotForce = new Vec3();\n/**\r\n * Apply force to a local point in the body.\r\n * @method applyLocalForce\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\n/**\r\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\r\n * @method applyImpulse\r\n * @param  {Vec3} impulse The amount of impulse to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\n/**\r\n * Apply locally-defined impulse to a local point in the body.\r\n * @method applyLocalImpulse\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\r\n * Base class for broadphase implementations\r\n * @class Broadphase\r\n * @constructor\r\n * @author schteppe\r\n */\nclass Broadphase {\n  // The world to search for collisions in.\n  // If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n  // Set to true if the objects in the world moved.\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\r\n   * Get the collision pairs from the world\r\n   * @method collisionPairs\r\n   * @param {World} world The world to search in\r\n   * @param {Array} p1 Empty array to be filled with body objects\r\n   * @param {Array} p2 Empty array to be filled with body objects\r\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\r\n   * Check if a body pair needs to be intersection tested at all.\r\n   * @method needBroadphaseCollision\r\n   * @param {Body} bodyA\r\n   * @param {Body} bodyB\r\n   * @return {bool}\r\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if the bounding volumes of two bodies intersect.\r\n   * @method intersectionTest\r\n   * @param {Body} bodyA\r\n   * @param {Body} bodyB\r\n   * @param {array} pairs1\r\n   * @param {array} pairs2\r\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\r\n   * Check if the bounding boxes of two bodies are intersecting.\r\n   * @method doBoundingBoxBroadphase\r\n   * @param {Body} bodyA\r\n   * @param {Body} bodyB\r\n   * @param {Array} pairs1\r\n   * @param {Array} pairs2\r\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.computeAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.computeAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? id1 + \",\" + id2 : id2 + \",\" + id1;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\r\n   * To be implemented by subcasses\r\n   * @method setWorld\r\n   * @param {World} world\r\n   */\n\n\n  setWorld(world) {}\n  /**\r\n   * Returns all the bodies within the AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param  {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n}\n/**\r\n * Check if the bounding spheres of two bodies are intersecting.\r\n * @method doBoundingSphereBroadphase\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Array} pairs1 bodyA is appended to this array if intersection\r\n * @param {Array} pairs2 bodyB is appended to this array if intersection\r\n */\n\nconst // Temp objects\nBroadphase_collisionPairs_r = new Vec3();\n/**\r\n * Removes duplicate pairs from the pair arrays.\r\n * @method makePairsUnique\r\n * @param {Array} pairs1\r\n * @param {Array} pairs2\r\n */\n\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\n\nBroadphase.boundingSphereCheck = (bodyA, bodyB) => {\n  const dist = new Vec3(); // bsc_dist;\n\n  bodyA.position.vsub(bodyB.position, dist);\n  const sa = bodyA.shapes[0];\n  const sb = bodyB.shapes[0];\n  return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n};\n\n/**\r\n * Axis aligned uniform grid broadphase.\r\n * @class GridBroadphase\r\n * @constructor\r\n * @extends Broadphase\r\n * @todo Needs support for more than just planes and spheres.\r\n * @param {Vec3} aabbMin\r\n * @param {Vec3} aabbMax\r\n * @param {Number} nx Number of boxes along x\r\n * @param {Number} ny Number of boxes along y\r\n * @param {Number} nz Number of boxes along z\r\n */\nclass GridBroadphase extends Broadphase {\n  constructor(aabbMin = new Vec3(100, 100, 100), aabbMax = new Vec3(-100, -100, -100), nx = 10, ny = 10, nz = 10) {\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.numObjects();\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    const BOX = types.BOX;\n    const COMPOUND = types.COMPOUND;\n    const CONVEXPOLYHEDRON = types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.computeAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\n/**\r\n * Get all the collision pairs in the physics world\r\n * @method collisionPairs\r\n * @param {World} world\r\n * @param {Array} pairs1\r\n * @param {Array} pairs2\r\n */\n\nconst GridBroadphase_collisionPairs_d = new Vec3();\n\n/**\r\n * Naive broadphase implementation, used in lack of better ones.\r\n * @class NaiveBroadphase\r\n * @constructor\r\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\r\n * @extends Broadphase\r\n */\nclass NaiveBroadphase extends Broadphase {\n  constructor() {\n    super();\n  }\n  /**\r\n   * Get all the collision pairs in the physics world\r\n   * @method collisionPairs\r\n   * @param {World} world\r\n   * @param {Array} pairs1\r\n   * @param {Array} pairs2\r\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\r\n * Storage for Ray casting data.\r\n * @class RaycastResult\r\n * @constructor\r\n */\nclass RaycastResult {\n  // The index of the hit triangle, if the hit shape was a trimesh.\n  // Distance to the hit. Will be set to -1 if there was no hit.\n  // If the ray should stop traversing the bodies.\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * Reset all result data.\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * @method abort\r\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\r\n   * @method set\r\n   * @param {Vec3} rayFromWorld\r\n   * @param {Vec3} rayToWorld\r\n   * @param {Vec3} hitNormalWorld\r\n   * @param {Vec3} hitPointWorld\r\n   * @param {Shape} shape\r\n   * @param {Body} body\r\n   * @param {number} distance\r\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nconst RAY_MODES = {\n  CLOSEST: 1,\n  ANY: 2,\n  ALL: 4\n};\n\n/**\r\n * A line in 3D space that intersects bodies and return points.\r\n * @class Ray\r\n * @constructor\r\n * @param {Vec3} from\r\n * @param {Vec3} to\r\n */\nclass Ray {\n  // The precision of the ray. Used when checking parallelity etc.\n  // Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n  // If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n  // The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n  // Current result object.\n  // Will be set to true during intersectWorld() if the ray hit anything.\n  // User-provided result callback. Will be used if mode is Ray.ALL.\n  constructor(from = new Vec3(), to = new Vec3()) {\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\r\n   * Do itersection against all bodies in the given World.\r\n   * @method intersectWorld\r\n   * @param  {World} world\r\n   * @param  {object} options\r\n   * @return {Boolean} True if the ray hit anything, otherwise false.\r\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\r\n   * Shoot a ray at a body, get back information about the hit.\r\n   * @param {Body} body\r\n   * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\r\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\r\n   * @method intersectBodies\r\n   * @param {Array} bodies An array of Body objects.\r\n   * @param {RaycastResult} [result] Deprecated\r\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\r\n   * Updates the direction vector.\r\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\r\n   * Get the world AABB of the ray.\r\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    const data = shape.data;\n    const w = shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\r\n   * @todo Optimize by transforming the world to local space first.\r\n   * @todo Use Octree lookup\r\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const indices = mesh.indices;\n    const vertices = mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\r\n   * @return {boolean} True if the intersections should continue\r\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n\n}\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\nconst tmpAABB = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\n/*\r\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\r\n */\n\nRay.pointInTriangle = pointInTriangle;\n\nfunction pointInTriangle(p, a, b, c) {\n  c.vsub(a, v0);\n  b.vsub(a, v1);\n  p.vsub(a, v2);\n  const dot00 = v0.dot(v0);\n  const dot01 = v0.dot(v1);\n  const dot02 = v0.dot(v2);\n  const dot11 = v1.dot(v1);\n  const dot12 = v1.dot(v2);\n  let u;\n  let v;\n  return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n}\n\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nRay.prototype[Shape.types.BOX] = Ray.prototype._intersectBox;\nRay.prototype[Shape.types.PLANE] = Ray.prototype._intersectPlane;\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype._intersectHeightfield;\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nRay.prototype[Shape.types.SPHERE] = Ray.prototype._intersectSphere;\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_vector = new Vec3();\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype._intersectConvex;\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nconst intersectTrimesh_localAABB = new AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype._intersectTrimesh;\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\r\n * Sweep and prune broadphase along one axis.\r\n *\r\n * @class SAPBroadphase\r\n * @constructor\r\n * @param {World} [world]\r\n * @extends Broadphase\r\n */\nclass SAPBroadphase extends Broadphase {\n  // List of bodies currently in the broadphase.\n  // The world to search in.\n  // Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\r\n   * Change the world\r\n   * @method setWorld\r\n   * @param  {World} world\r\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\r\n   * Collect all collision pairs\r\n   * @method collisionPairs\r\n   * @param  {World} world\r\n   * @param  {Array} p1\r\n   * @param  {Array} p2\r\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.computeAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\r\n   * Computes the variance of the body positions and estimates the best\r\n   * axis to use. Will automatically set property .axisIndex.\r\n   * @method autoDetectAxis\r\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    const lower = aabb.lowerBound[axis];\n    const upper = aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @static\r\n * @method insertionSortX\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\nSAPBroadphase.insertionSortX = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortY\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortY = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortZ\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortZ = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * Check if the bounds of two bodies overlap, along the given SAP axis.\r\n * @static\r\n * @method checkBounds\r\n * @param  {Body} bi\r\n * @param  {Body} bj\r\n * @param  {Number} axisIndex\r\n * @return {Boolean}\r\n */\n\n\nSAPBroadphase.checkBounds = (bi, bj, axisIndex) => {\n  let biPos;\n  let bjPos;\n\n  if (axisIndex === 0) {\n    biPos = bi.position.x;\n    bjPos = bj.position.x;\n  } else if (axisIndex === 1) {\n    biPos = bi.position.y;\n    bjPos = bj.position.y;\n  } else if (axisIndex === 2) {\n    biPos = bi.position.z;\n    bjPos = bj.position.z;\n  }\n\n  const ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        // boundA1 = biPos - ri,\n  boundA2 = biPos + ri,\n        boundB1 = bjPos - rj; // boundB2 = bjPos + rj;\n\n  return boundB1 < boundA2;\n};\n\nfunction Utils() {}\n/**\r\n * Extend an options object with default values.\r\n * @static\r\n * @method defaults\r\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\r\n * @param  {object} defaults An object containing default values.\r\n * @return {object} The modified options object.\r\n */\n\nUtils.defaults = (options = {}, defaults) => {\n  for (let key in defaults) {\n    if (!(key in options)) {\n      options[key] = defaults[key];\n    }\n  }\n\n  return options;\n};\n\n/**\r\n * Constraint base class\r\n * @class Constraint\r\n * @author schteppe\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {boolean} [options.collideConnected=true]\r\n * @param {boolean} [options.wakeUpBodies=true]\r\n */\nclass Constraint {\n  // Equations to be solved in this constraint.\n  // Set to true if you want the bodies to collide when they are connected.\n  constructor(bodyA, bodyB, options = {}) {\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\r\n   * Update all the equations with data.\r\n   * @method update\r\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\r\n   * Enables all equations in the constraint.\r\n   * @method enable\r\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\r\n   * Disables all equations in the constraint.\r\n   * @method disable\r\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\r\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\r\n */\n\nclass JacobianElement {\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\r\n   * Multiply with other JacobianElement\r\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\r\n   * Multiply with two vectors\r\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\r\n * Equation base class\r\n * @class Equation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bi\r\n * @param {Body} bj\r\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\r\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\r\n */\nclass Equation {\n  // SPOOK parameter\n  // SPOOK parameter\n  // SPOOK parameter\n  // A number, proportional to the force added to the bodies.\n  constructor(bi, bj, minForce = -1e6, maxForce = 1e6) {\n    this.id = Equation.id++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\r\n   * Recalculates a,b,eps.\r\n   * @method setSpookParams\r\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\r\n   * Computes the right hand side of the SPOOK equation\r\n   * @method computeB\r\n   * @return {Number}\r\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\r\n   * Computes G*q, where q are the generalized body coordinates\r\n   * @method computeGq\r\n   * @return {Number}\r\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\r\n   * Computes G*W, where W are the body velocities\r\n   * @method computeGW\r\n   * @return {Number}\r\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\r\n   * Computes G*Wlambda, where W are the body velocities\r\n   * @method computeGWlambda\r\n   * @return {Number}\r\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp$1);\n    result += tmp$1.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp$1);\n    result += tmp$1.dot(GB.rotational);\n    return result;\n  }\n  /**\r\n   * Add constraint velocity to the bodies.\r\n   * @method addToWlambda\r\n   * @param {Number} deltalambda\r\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\r\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\r\n   * @method computeInvC\r\n   * @param  {Number} eps\r\n   * @return {Number}\r\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.id = 0;\n/**\r\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\r\n * @method computeGiMf\r\n * @return {Number}\r\n */\n\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\n/**\r\n * Computes G*inv(M)*G'\r\n * @method computeGiMGt\r\n * @return {Number}\r\n */\n\nconst tmp$1 = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\r\n * Contact/non-penetration constraint equation\r\n * @class ContactEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @extends Equation\r\n */\nclass ContactEquation extends Equation {\n  // \"bounciness\": u1 = -e*u0\n  // World-oriented vector that goes from the center of bi to the contact point.\n  // World-oriented vector that starts in body j position and goes to the contact point.\n  // Contact normal, pointing out of body i.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    const fi = bi.force;\n    const taui = bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    const fj = bj.force;\n    const tauj = bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\r\n   * Get the current relative velocity in the contact point.\r\n   * @method getImpactVelocityAlongNormal\r\n   * @return {number}\r\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\r\n * Connects two bodies at given offset points.\r\n * @class PointToPointConstraint\r\n * @extends Constraint\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\r\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\r\n * @param {Vec3} pivotB See pivotA.\r\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\r\n *\r\n * @example\r\n *     const bodyA = new Body({ mass: 1 });\r\n *     const bodyB = new Body({ mass: 1 });\r\n *     bodyA.position.set(-1, 0, 0);\r\n *     bodyB.position.set(1, 0, 0);\r\n *     bodyA.addShape(shapeA);\r\n *     bodyB.addShape(shapeB);\r\n *     world.addBody(bodyA);\r\n *     world.addBody(bodyB);\r\n *     const localPivotA = new Vec3(1, 0, 0);\r\n *     const localPivotB = new Vec3(-1, 0, 0);\r\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\r\n *     world.addConstraint(constraint);\r\n */\nclass PointToPointConstraint extends Constraint {\n  // Pivot, defined locally in bodyA.\n  // Pivot, defined locally in bodyB.\n  constructor(bodyA, pivotA = new Vec3(), bodyB, pivotB = new Vec3(), maxForce = 1e6) {\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\r\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\r\n * @class ConeEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA] Local axis in A\r\n * @param {Vec3} [options.axisB] Local axis in B\r\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\r\n * @param {number} [options.maxForce=1e6]\r\n * @extends Equation\r\n */\nclass ConeEquation extends Equation {\n  // The cone angle to keep.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1;\n    const njxni = tmpVec2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\n\n/**\r\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\r\n * @class RotationalEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {number} [options.maxForce]\r\n * @extends Equation\r\n */\nclass RotationalEquation extends Equation {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\r\n * @class ConeTwistConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA]\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\n\n/**\r\n * Constrains two bodies to be at a constant distance from each others center of mass.\r\n * @class DistanceConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\r\n * @param {Number} [maxForce=1e6]\r\n * @extends Constraint\r\n */\nclass DistanceConstraint extends Constraint {\n  constructor(bodyA, bodyB, distance, maxForce = 1e6) {\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\r\n * Lock constraint. Will remove all degrees of freedom between the bodies.\r\n * @class LockConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\n\n/**\r\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\r\n * @class RotationalMotorEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} maxForce\r\n * @extends Equation\r\n */\nclass RotationalMotorEquation extends Equation {\n  // World oriented rotational axis.\n  // World oriented rotational axis.\n  // Motor velocity.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\r\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\r\n * @class HingeConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\r\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass HingeConstraint extends PointToPointConstraint {\n  // Rotation axis, defined locally in bodyA.\n  // Rotation axis, defined locally in bodyB.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\r\n   * @method enableMotor\r\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\r\n   * @method disableMotor\r\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\r\n   * @method setMotorSpeed\r\n   * @param {number} speed\r\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\r\n   * @method setMotorMaxForce\r\n   * @param {number} maxForce\r\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\r\n * Constrains the slipping in a contact along a tangent\r\n * @class FrictionEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\r\n * @extends Equation\r\n */\nclass FrictionEquation extends Equation {\n  // Tangent.\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\r\n * Defines what happens when two materials meet.\r\n * @class ContactMaterial\r\n * @constructor\r\n * @param {Material} m1\r\n * @param {Material} m2\r\n * @param {object} [options]\r\n * @param {Number} [options.friction=0.3]\r\n * @param {Number} [options.restitution=0.3]\r\n * @param {number} [options.contactEquationStiffness=1e7]\r\n * @param {number} [options.contactEquationRelaxation=3]\r\n * @param {number} [options.frictionEquationStiffness=1e7]\r\n * @param {Number} [options.frictionEquationRelaxation=3]\r\n * @todo Refactor materials to materialA and materialB\r\n */\nclass ContactMaterial {\n  // Identifier of this material.\n  // Participating materials.\n  // Friction coefficient.\n  // Restitution coefficient.\n  // Stiffness of the produced contact equations.\n  // Relaxation time of the produced contact equations.\n  // Stiffness of the produced friction equations.\n  // Relaxation time of the produced friction equations\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\r\n * Defines a physics material.\r\n * @class Material\r\n * @constructor\r\n * @param {object} [options]\r\n * @author schteppe\r\n */\nclass Material {\n  // Material name.\n  // Material id.\n  // Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  // Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  constructor(options = {}) {\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\r\n * A spring, connecting two bodies.\r\n *\r\n * @class Spring\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Object} [options]\r\n * @param {number} [options.restLength]   A number > 0. Default: 1\r\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\r\n * @param {number} [options.damping]      A number >= 0. Default: 1\r\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\r\n * @param {Vec3}  [options.worldAnchorB]\r\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\r\n * @param {Vec3}  [options.localAnchorB]\r\n */\nclass Spring {\n  // Rest length of the spring.\n  // Stiffness of the spring.\n  // Damping of the spring.\n  // First connected body.\n  // Second connected body.\n  // Anchor for bodyA in local bodyA coordinates.\n  // Anchor for bodyB in local bodyB coordinates.\n  constructor(bodyA, bodyB, options = {}) {\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\r\n   * Set the anchor point on body A, using world coordinates.\r\n   * @method setWorldAnchorA\r\n   * @param {Vec3} worldAnchorA\r\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\r\n   * Set the anchor point on body B, using world coordinates.\r\n   * @method setWorldAnchorB\r\n   * @param {Vec3} worldAnchorB\r\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\r\n   * Get the anchor point on body A, in world coordinates.\r\n   * @method getWorldAnchorA\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\r\n   * Get the anchor point on body B, in world coordinates.\r\n   * @method getWorldAnchorB\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\r\n   * Apply the spring force to the connected bodies.\r\n   * @method applyForce\r\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\r\n * @class WheelInfo\r\n * @constructor\r\n * @param {Object} [options]\r\n *\r\n * @param {Vec3} [options.chassisConnectionPointLocal]\r\n * @param {Vec3} [options.chassisConnectionPointWorld]\r\n * @param {Vec3} [options.directionLocal]\r\n * @param {Vec3} [options.directionWorld]\r\n * @param {Vec3} [options.axleLocal]\r\n * @param {Vec3} [options.axleWorld]\r\n * @param {number} [options.suspensionRestLength=1]\r\n * @param {number} [options.suspensionMaxLength=2]\r\n * @param {number} [options.radius=1]\r\n * @param {number} [options.suspensionStiffness=100]\r\n * @param {number} [options.dampingCompression=10]\r\n * @param {number} [options.dampingRelaxation=10]\r\n * @param {number} [options.frictionSlip=10000]\r\n * @param {number} [options.steering=0]\r\n * @param {number} [options.rotation=0]\r\n * @param {number} [options.deltaRotation=0]\r\n * @param {number} [options.rollInfluence=0.01]\r\n * @param {number} [options.maxSuspensionForce]\r\n * @param {boolean} [options.isFrontWheel=true]\r\n * @param {number} [options.clippedInvContactDotSuspension=1]\r\n * @param {number} [options.suspensionRelativeVelocity=0]\r\n * @param {number} [options.suspensionForce=0]\r\n * @param {number} [options.skidInfo=0]\r\n * @param {number} [options.suspensionLength=0]\r\n * @param {number} [options.maxSuspensionTravel=1]\r\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\r\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\r\n */\nclass WheelInfo {\n  // Max travel distance of the suspension, in meters.\n  // Speed to apply to the wheel rotation when the wheel is sliding.\n  // If the customSlidingRotationalSpeed should be used.\n  // Connection point, defined locally in the chassis body frame.\n  // Rotation value, in radians.\n  // The result from raycasting.\n  // Wheel world transform.\n  constructor(options = {}) {\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10000,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\r\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\r\n * @class RaycastVehicle\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Body} [options.chassisBody] The car chassis body.\r\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\r\n * @param {integer} [options.indexLeftAxis]\r\n * @param {integer} [options.indexUpAxis]\r\n */\nclass RaycastVehicle {\n  // Will be set to true if the car is sliding.\n  // Index of the right axis, 0=x, 1=y, 2=z\n  // Index of the forward axis, 0=x, 1=y, 2=z\n  // Index of the up axis, 0=x, 1=y, 2=z\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 1;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 2;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n  }\n  /**\r\n   * Add a wheel. For information about the options, see WheelInfo.\r\n   * @method addWheel\r\n   * @param {object} [options]\r\n   */\n\n\n  addWheel(options = {}) {\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method applyEngineForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\r\n   * Set the braking force of a wheel\r\n   * @method setBrake\r\n   * @param {number} brake\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\r\n   * Get one of the wheel axles, world-oriented.\r\n   * @private\r\n   * @method getVehicleAxisWorld\r\n   * @param  {integer} axisIndex\r\n   * @param  {Vec3} result\r\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\r\n   * Update one of the wheel transform.\r\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\r\n   * @method updateWheelTransform\r\n   * @param {integer} wheelIndex The wheel index to update.\r\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\r\n   * Get the world transform of one of the wheels\r\n   * @method getWheelTransformWorld\r\n   * @param  {integer} wheelIndex\r\n   * @return {Transform}\r\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor;\n        const y = wheel.sideImpulse * sideFactor;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nconst tmpRay = new Ray();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); //bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\r\n * Spherical shape\r\n * @class Sphere\r\n * @constructor\r\n * @extends Shape\r\n * @param {Number} radius The radius of the sphere, a non-negative number.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Sphere extends Shape {\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\r\n * Simple vehicle helper class with spherical rigid body wheels.\r\n * @class RigidVehicle\r\n * @constructor\r\n * @param {Body} [options.chassisBody]\r\n */\nclass RigidVehicle {\n  constructor(options = {}) {\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 2, 0.5))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\r\n   * Add a wheel\r\n   * @method addWheel\r\n   * @param {object} options\r\n   * @param {boolean} [options.isFrontWheel]\r\n   * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\r\n   * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\r\n   * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\r\n   * @param {Body} [options.body] The wheel body.\r\n   */\n\n\n  addWheel(options = {}) {\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   * @todo check coordinateSystem\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const y = axis.y;\n    this.constraints[wheelIndex].axisA.set(c * x - s * y, s * x + c * y, 0);\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method setMotorSpeed\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method disableMotor\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method setWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\r\n   * Apply a torque on one of the wheels.\r\n   * @method applyWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\r\n   * Get current rotational velocity of a wheel\r\n   * @method getWheelSpeed\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\r\n * Smoothed-particle hydrodynamics system\r\n * @class SPHSystem\r\n * @constructor\r\n */\nclass SPHSystem {\n  // Density of the system (kg/m3).\n  // Distance below which two particles are considered to be neighbors. It should be adjusted so there are about 15-20 neighbor particles within this radius.\n  // Viscosity of the system.\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\r\n   * Add a particle to the system.\r\n   * @method add\r\n   * @param {Body} particle\r\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\r\n   * Remove a particle from the system.\r\n   * @method remove\r\n   * @param {Body} particle\r\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\n/**\r\n * Get neighbors within smoothing volume, save in the array neighbors\r\n * @method getNeighbors\r\n * @param {Body} particle\r\n * @param {Array} neighbors\r\n */\n\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\r\n * @class Cylinder\r\n * @constructor\r\n * @extends ConvexPolyhedron\r\n * @author schteppe / https://github.com/schteppe\r\n * @param {Number} radiusTop\r\n * @param {Number} radiusBottom\r\n * @param {Number} height\r\n * @param {Number} numSegments The number of segments to build the cylinder out of\r\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder top face\n\n    const temp = [];\n\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n  }\n\n}\n\n/**\r\n * Particle shape.\r\n * @class Particle\r\n * @constructor\r\n * @author schteppe\r\n * @extends Shape\r\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\r\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\r\n * @class Plane\r\n * @constructor\r\n * @extends Shape\r\n * @author schteppe\r\n */\nclass Plane extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\r\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\r\n * @class Heightfield\r\n * @extends Shape\r\n * @constructor\r\n * @param {Array} data An array of Y values that will be used to construct the terrain.\r\n * @param {object} options\r\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\r\n * @param {Number} [options.maxValue] Maximum value.\r\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\r\n * @todo Should be possible to use along all axes, not just y\r\n * @todo should be possible to scale along all axes\r\n * @todo Refactor elementSize to elementSizeX and elementSizeY\r\n *\r\n * @example\r\n *     // Generate some height data (y-values).\r\n *     const data = [];\r\n *     for(let i = 0; i < 1000; i++){\r\n *         const y = 0.5 * Math.cos(0.2 * i);\r\n *         data.push(y);\r\n *     }\r\n *\r\n *     // Create the heightfield shape\r\n *     const heightfieldShape = new Heightfield(data, {\r\n *         elementSize: 1 // Distance between the data points in X and Y directions\r\n *     });\r\n *     const heightfieldBody = new Body();\r\n *     heightfieldBody.addShape(heightfieldShape);\r\n *     world.addBody(heightfieldBody);\r\n */\nclass Heightfield extends Shape {\n  // An array of numbers, or height values, that are spread out along the x axis.\n  // Max value of the data.\n  // Max value of the data.\n  // The width of each element. To do: elementSizeX and Y\n  constructor(data, options = {}) {\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\r\n   * Call whenever you change the data array.\r\n   * @method update\r\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\r\n   * Update the .minValue property\r\n   * @method updateMinValue\r\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\r\n   * Update the .maxValue property\r\n   * @method updateMaxValue\r\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\r\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\r\n   * @method setHeightValueAtIndex\r\n   * @param {integer} xi\r\n   * @param {integer} yi\r\n   * @param {number} value\r\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\r\n   * Get max/min in a rectangle in the matrix data\r\n   * @method getRectMinMax\r\n   * @param  {integer} iMinX\r\n   * @param  {integer} iMinY\r\n   * @param  {integer} iMaxX\r\n   * @param  {integer} iMaxY\r\n   * @param  {array} [result] An array to store the results in.\r\n   * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\r\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result = []) {\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\r\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\r\n   * @method getIndexOfPosition\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @param  {array} result Two-element array\r\n   * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\r\n   * @return {boolean}\r\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\r\n   * Get an AABB of a square in the heightfield\r\n   * @param  {number} xi\r\n   * @param  {number} yi\r\n   * @param  {AABB} result\r\n   */\n\n\n  getAabbAtIndex(xi, yi, {\n    lowerBound,\n    upperBound\n  }) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\r\n   * Get the height in the heightfield at a given position\r\n   * @param  {number} x\r\n   * @param  {number} y\r\n   * @param  {boolean} edgeClamp\r\n   * @return {number}\r\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return xi + \"_\" + yi + \"_\" + (getUpperTriangle ? 1 : 0);\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\r\n   * Get a triangle from the heightfield\r\n   * @param  {number} xi\r\n   * @param  {number} yi\r\n   * @param  {boolean} upper\r\n   * @param  {Vec3} a\r\n   * @param  {Vec3} b\r\n   * @param  {Vec3} c\r\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\r\n   * Get a triangle in the terrain in the form of a triangular convex shape.\r\n   * @method getConvexTrianglePillar\r\n   * @param  {integer} i\r\n   * @param  {integer} j\r\n   * @param  {boolean} getUpperTriangle\r\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -h - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -h - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\r\n   * Sets the height values from an image. Currently only supported in browser.\r\n   * @method setHeightsFromImage\r\n   * @param {Image} image\r\n   * @param {Vec3} scale\r\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\r\n * @class OctreeNode\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Octree} [options.root]\r\n * @param {AABB} [options.aabb]\r\n */\nclass OctreeNode {\n  // The root node\n  // Boundary of this node\n  // Contained data at the current node level\n  // Children to this node\n  constructor(options = {}) {\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\r\n   * Insert data into this node\r\n   * @method insert\r\n   * @param  {AABB} aabb\r\n   * @param  {object} elementData\r\n   * @return {boolean} True if successful, otherwise false\r\n   */\n\n\n  insert(aabb, elementData, level = 0) {\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\r\n   * Create 8 equally sized children nodes and put them in the .children array.\r\n   * @method subdivide\r\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\r\n   * Get all data, potentially within an AABB\r\n   * @method aabbQuery\r\n   * @param  {AABB} aabb\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  aabbQuery(aabb, result) {\n    const nodeData = this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    const children = this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\r\n   * Get all data, potentially intersected by a ray.\r\n   * @method rayQuery\r\n   * @param  {Ray} ray\r\n   * @param  {Transform} treeTransform\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB$1);\n    tmpAABB$1.toLocalFrame(treeTransform, tmpAABB$1);\n    this.aabbQuery(tmpAABB$1, result);\n    return result;\n  }\n  /**\r\n   * @method removeEmptyNodes\r\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\r\n * @class Octree\r\n * @param {AABB} aabb The total AABB of the tree\r\n * @param {object} [options]\r\n * @param {number} [options.maxDepth=8] Maximum subdivision depth\r\n * @extends OctreeNode\r\n */\n\n\nclass Octree extends OctreeNode {\n  // Maximum subdivision depth\n  constructor(aabb, options = {}) {\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB$1 = new AABB();\n\n/**\r\n * @class Trimesh\r\n * @constructor\r\n * @param {array} vertices\r\n * @param {array} indices\r\n * @extends Shape\r\n * @example\r\n *     // How to make a mesh with a single triangle\r\n *     const vertices = [\r\n *         0, 0, 0, // vertex 0\r\n *         1, 0, 0, // vertex 1\r\n *         0, 1, 0  // vertex 2\r\n *     ];\r\n *     const indices = [\r\n *         0, 1, 2  // triangle 0\r\n *     ];\r\n *     const trimeshShape = new Trimesh(vertices, indices);\r\n */\nclass Trimesh extends Shape {\n  // Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n  // The normals data.\n  // The local AABB of the mesh.\n  // References to vertex pairs, making up all unique edges in the trimesh.\n  // Local scaling of the mesh. Use .setScale() to set it.\n  // The indexed triangles. Use .updateTree() to update it.\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\r\n   * @method updateTree\r\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\r\n   * Get triangles in a local AABB from the trimesh.\r\n   * @method getTrianglesInAABB\r\n   * @param  {AABB} aabb\r\n   * @param  {array} result An array of integers, referencing the queried triangles.\r\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\r\n   * @method setScale\r\n   * @param {Vec3} scale\r\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\r\n   * Compute the normals of the faces. Will save in the .normals array.\r\n   * @method updateNormals\r\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\r\n   * Update the .edges property\r\n   * @method updateEdges\r\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? a + \"_\" + b : b + \"_\" + a;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\r\n   * Get an edge vertex\r\n   * @method getEdgeVertex\r\n   * @param  {number} edgeIndex\r\n   * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\r\n   * @param  {Vec3} vertexStore Where to store the result\r\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\r\n   * Get a vector along an edge.\r\n   * @method getEdgeVector\r\n   * @param  {number} edgeIndex\r\n   * @param  {Vec3} vectorStore\r\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\r\n   * Get vertex i.\r\n   * @method getVertex\r\n   * @param  {number} i\r\n   * @param  {Vec3} out\r\n   * @return {Vec3} The \"out\" vector object\r\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\r\n   * Get raw vertex i\r\n   * @private\r\n   * @method _getUnscaledVertex\r\n   * @param  {number} i\r\n   * @param  {Vec3} out\r\n   * @return {Vec3} The \"out\" vector object\r\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\r\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\r\n   * @method getWorldVertex\r\n   * @param  {number} i\r\n   * @param  {Vec3} pos\r\n   * @param  {Quaternion} quat\r\n   * @param  {Vec3} out\r\n   * @return {Vec3} The \"out\" vector object\r\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\r\n   * Get the three vertices for triangle i.\r\n   * @method getTriangleVertices\r\n   * @param  {number} i\r\n   * @param  {Vec3} a\r\n   * @param  {Vec3} b\r\n   * @param  {Vec3} c\r\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\r\n   * Compute the normal of triangle i.\r\n   * @method getNormal\r\n   * @param  {Number} i\r\n   * @param  {Vec3} target\r\n   * @return {Vec3} The \"target\" vector object\r\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   * @return {Vec3} The \"target\" vector object\r\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\r\n   * Compute the local AABB for the trimesh\r\n   * @method computeLocalAABB\r\n   * @param  {AABB} aabb\r\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    const vertices = this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\r\n   * Update the .aabb property\r\n   * @method updateAABB\r\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\r\n   * Will update the .boundingSphereRadius property\r\n   * @method updateBoundingSphereRadius\r\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\r\n   * @method calculateWorldAABB\r\n   * @param {Vec3}        pos\r\n   * @param {Quaternion}  quat\r\n   * @param {Vec3}        min\r\n   * @param {Vec3}        max\r\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\r\n        const n = this.vertices.length / 3,\r\n            verts = this.vertices;\r\n        const minx,miny,minz,maxx,maxy,maxz;\r\n          const v = tempWorldVertex;\r\n        for(let i=0; i<n; i++){\r\n            this.getVertex(i, v);\r\n            quat.vmult(v, v);\r\n            pos.vadd(v, v);\r\n            if (v.x < minx || minx===undefined){\r\n                minx = v.x;\r\n            } else if(v.x > maxx || maxx===undefined){\r\n                maxx = v.x;\r\n            }\r\n              if (v.y < miny || miny===undefined){\r\n                miny = v.y;\r\n            } else if(v.y > maxy || maxy===undefined){\r\n                maxy = v.y;\r\n            }\r\n              if (v.z < minz || minz===undefined){\r\n                minz = v.z;\r\n            } else if(v.z > maxz || maxz===undefined){\r\n                maxz = v.z;\r\n            }\r\n        }\r\n        min.set(minx,miny,minz);\r\n        max.set(maxx,maxy,maxz);\r\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\r\n   * Get approximate volume\r\n   * @method volume\r\n   * @return {Number}\r\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\n/**\r\n * Get face normal given 3 vertices\r\n * @static\r\n * @method computeNormal\r\n * @param {Vec3} va\r\n * @param {Vec3} vb\r\n * @param {Vec3} vc\r\n * @param {Vec3} target\r\n */\n\nconst cb = new Vec3();\nconst ab = new Vec3();\n\nTrimesh.computeNormal = (va, vb, vc, target) => {\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n/**\r\n * Create a Trimesh instance, shaped as a torus.\r\n * @static\r\n * @method createTorus\r\n * @param  {number} [radius=1]\r\n * @param  {number} [tube=0.5]\r\n * @param  {number} [radialSegments=8]\r\n * @param  {number} [tubularSegments=6]\r\n * @param  {number} [arc=6.283185307179586]\r\n * @return {Trimesh} A torus\r\n */\n\nTrimesh.createTorus = (radius = 1, tube = 0.5, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) => {\n  const vertices = [];\n  const indices = [];\n\n  for (let j = 0; j <= radialSegments; j++) {\n    for (let i = 0; i <= tubularSegments; i++) {\n      const u = i / tubularSegments * arc;\n      const v = j / radialSegments * Math.PI * 2;\n      const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n      const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n      const z = tube * Math.sin(v);\n      vertices.push(x, y, z);\n    }\n  }\n\n  for (let j = 1; j <= radialSegments; j++) {\n    for (let i = 1; i <= tubularSegments; i++) {\n      const a = (tubularSegments + 1) * j + i - 1;\n      const b = (tubularSegments + 1) * (j - 1) + i - 1;\n      const c = (tubularSegments + 1) * (j - 1) + i;\n      const d = (tubularSegments + 1) * j + i;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n\n  return new Trimesh(vertices, indices);\n};\n\n/**\r\n * Constraint equation solver base class.\r\n * @class Solver\r\n * @constructor\r\n * @author schteppe / https://github.com/schteppe\r\n */\nclass Solver {\n  // All equations to be solved\n  constructor() {\n    this.equations = [];\n  }\n  /**\r\n   * Should be implemented in subclasses!\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\r\n   * Add an equation\r\n   * @method addEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled) {\n      this.equations.push(eq);\n    }\n  }\n  /**\r\n   * Remove an equation\r\n   * @method removeEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\r\n   * Add all equations\r\n   * @method removeAllEquations\r\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\r\n * Constraint equation Gauss-Seidel solver.\r\n * @class GSSolver\r\n * @constructor\r\n * @todo The spook parameters should be specified for each constraint, not globally.\r\n * @author schteppe / https://github.com/schteppe\r\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\r\n * @extends Solver\r\n */\nclass GSSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\r\n   * Solve\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that does not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the .multiplier property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n}\nconst GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\n\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\r\n * Splits the equations into islands and solves them independently. Can improve performance.\r\n * @class SplitSolver\r\n * @constructor\r\n * @extends Solver\r\n * @param {Solver} subsolver\r\n */\nclass SplitSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\r\n   * Solve the subsystems\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      const iter = subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\r\n * For pooling objects that can be reused.\r\n * @class Pool\r\n * @constructor\r\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n  /**\r\n   * Release an object after use\r\n   * @method release\r\n   * @param {Object} obj\r\n   */\n\n\n  release(...args) {\n    const Nargs = args.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(args[i]);\n    }\n\n    return this;\n  }\n  /**\r\n   * Get an object\r\n   * @method get\r\n   * @return {mixed}\r\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\r\n   * Construct an object. Should be implemented in each subclass.\r\n   * @method constructObject\r\n   * @return {mixed}\r\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\r\n   * @method resize\r\n   * @param {number} size\r\n   * @return {Pool} Self, for chaining\r\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\r\n * @class Vec3Pool\r\n * @constructor\r\n * @extends Pool\r\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super();\n    this.type = Vec3;\n  }\n  /**\r\n   * Construct a vector\r\n   * @method constructObject\r\n   * @return {Vec3}\r\n   */\n\n\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\r\n * Helper class for the World. Generates ContactEquations.\r\n * @class Narrowphase\r\n * @constructor\r\n * @todo Sphere-ConvexPolyhedron contacts\r\n * @todo Contact reduction\r\n * @todo should move methods to prototype\r\n */\nclass Narrowphase {\n  // Internal storage of pooled contact points.\n  // Pooled vectors.\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\r\n   * Make a contact object, by using the internal pool or creating a new one.\r\n   * @method createContactEquation\r\n   * @param {Body} bi\r\n   * @param {Body} bj\r\n   * @param {Shape} si\r\n   * @param {Shape} sj\r\n   * @param {Shape} overrideShapeA\r\n   * @param {Shape} overrideShapeB\r\n   * @return {ContactEquation}\r\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      const mug = friction * world.gravity.length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  } // Take the average N latest contact point on the plane.\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    const bodyB = c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\r\n   * Generate all contacts between a list of body pairs\r\n   * @method getContacts\r\n   * @param {array} p1 Array of body indices\r\n   * @param {array} p2 Array of body indices\r\n   * @param {World} world\r\n   * @param {array} result Array to store generated contacts\r\n   * @param {array} oldcontacts Optional. Array of reusable contact objects\r\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1$2;\n    const xj = tmpVec2$2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, r.ni);\n    r.ni.normalize(); // Contact point locations\n\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.scale(si.radius, r.ri);\n    r.rj.scale(-sj.radius, r.rj);\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n    this.result.push(r);\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\r\n          // Skip all but 1\r\n          for (let k = 0; k < numContacts - 1; k++) {\r\n              result.pop();\r\n          }\r\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nNarrowphase.prototype[COLLISION_TYPES.boxBox] = Narrowphase.prototype.boxBox;\nNarrowphase.prototype[COLLISION_TYPES.boxConvex] = Narrowphase.prototype.boxConvex;\nNarrowphase.prototype[COLLISION_TYPES.boxParticle] = Narrowphase.prototype.boxParticle;\nNarrowphase.prototype[COLLISION_TYPES.sphereSphere] = Narrowphase.prototype.sphereSphere;\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeTrimesh] = Narrowphase.prototype.planeTrimesh;\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nNarrowphase.prototype[COLLISION_TYPES.sphereTrimesh] = Narrowphase.prototype.sphereTrimesh;\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.spherePlane] = Narrowphase.prototype.spherePlane; // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereBox] = Narrowphase.prototype.sphereBox;\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereConvex] = Narrowphase.prototype.sphereConvex;\nNarrowphase.prototype[COLLISION_TYPES.planeBox] = Narrowphase.prototype.planeBox;\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeConvex] = Narrowphase.prototype.planeConvex;\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexConvex] = Narrowphase.prototype.convexConvex; // Narrowphase.prototype[COLLISION_TYPES.convexTrimesh] = Narrowphase.prototype.convexTrimesh\n\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeParticle] = Narrowphase.prototype.planeParticle;\nconst particleSphere_normal = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereParticle] = Narrowphase.prototype.sphereParticle; // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexParticle] = Narrowphase.prototype.convexParticle;\nNarrowphase.prototype[COLLISION_TYPES.boxHeightfield] = Narrowphase.prototype.boxHeightfield;\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nNarrowphase.prototype[COLLISION_TYPES.convexHeightfield] = Narrowphase.prototype.convexHeightfield;\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereHeightfield] = Narrowphase.prototype.sphereHeightfield;\n\n/**\r\n * @class OverlapKeeper\r\n * @constructor\r\n */\nclass OverlapKeeper {\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\r\n   * @method set\r\n   * @param {Number} i\r\n   * @param {Number} j\r\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\r\n   * @method tick\r\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\r\n   * @method getDiff\r\n   * @param  {array} additions\r\n   * @param  {array} removals\r\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\n/**\r\n * @class TupleDictionary\r\n * @constructor\r\n */\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n  /**\r\n   * @method get\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @return {Object}\r\n   */\n\n\n  get(i, j) {\n    if (i > j) {\n      // swap\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.data[i + \"-\" + j];\n  }\n  /**\r\n   * @method set\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @param {Object} value\r\n   */\n\n\n  set(i, j, value) {\n    if (i > j) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    const key = i + \"-\" + j; // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /**\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\r\n * The physics world\r\n * @class World\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.gravity]\r\n * @param {boolean} [options.allowSleep]\r\n * @param {Broadphase} [options.broadphase]\r\n * @param {Solver} [options.solver]\r\n * @param {boolean} [options.quatNormalizeFast]\r\n * @param {number} [options.quatNormalizeSkip]\r\n */\nclass World extends EventTarget {\n  // Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n  // Makes bodies go to sleep when they've been inactive.\n  // All the current contacts (instances of ContactEquation) in the world.\n  // How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n  // Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n  // The wall-clock time since simulation start.\n  // Number of timesteps taken since start.\n  // Default and last timestep sizes.\n  // The broadphase algorithm to use. Default is NaiveBroadphase.\n  // All bodies in this world\n  // True if any bodies are not sleeping, false if every body is sleeping.\n  // The solver algorithm to use. Default is GSSolver.\n  // CollisionMatrix from the previous step.\n  // All added materials.\n  // Used to look up a ContactMaterial given two instances of Material.\n  // This contact material is used if no suitable contactmaterial is found for a contact.\n  // Time accumulator for interpolation. See http://gafferongames.com/game-physics/fix-your-timestep/\n  // Dispatched after a body has been added to the world.\n  // Dispatched after a body has been removed from the world.\n  constructor(options = {}) {\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.materials = [];\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\r\n   * Get the contact material between materials m1 and m2\r\n   * @method getContactMaterial\r\n   * @param {Material} m1\r\n   * @param {Material} m2\r\n   * @return {ContactMaterial} The contact material if it was found.\r\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\r\n   * Get number of objects in the world.\r\n   * @method numObjects\r\n   * @return {Number}\r\n   * @deprecated\r\n   */\n\n\n  numObjects() {\n    return this.bodies.length;\n  }\n  /**\r\n   * Store old collision state info\r\n   * @method collisionMatrixTick\r\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\r\n   * Add a constraint to the simulation.\r\n   * @method addConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\r\n   * Removes a constraint\r\n   * @method removeConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\r\n   * Raycast test\r\n   * @method rayTest\r\n   * @param {Vec3} from\r\n   * @param {Vec3} to\r\n   * @param {RaycastResult} result\r\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\r\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\r\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\r\n   * @method raycastAll\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {Function} callback\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAll(from, to, options = {}, callback) {\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\r\n   * @method raycastAny\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAny(from, to, options = {}, result) {\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and return information of the closest hit.\r\n   * @method raycastClosest\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastClosest(from, to, options = {}, result) {\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Add a rigid body to the simulation.\r\n   * @method add\r\n   * @param {Body} body\r\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\r\n   * @todo Adding an array of bodies should be possible. This would save some loops too\r\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\r\n   * Remove a rigid body from the simulation.\r\n   * @method remove\r\n   * @param {Body} body\r\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  } // TODO Make a faster map\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0, bl = bodies.length; i < bl; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0, sl = shapes.length; j < sl; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n  }\n  /**\r\n   * Adds a material to the World.\r\n   * @method addMaterial\r\n   * @param {Material} m\r\n   * @todo Necessary?\r\n   */\n\n\n  addMaterial(m) {\n    this.materials.push(m);\n  }\n  /**\r\n   * Adds a contact material to the World\r\n   * @method addContactMaterial\r\n   * @param {ContactMaterial} cmat\r\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\r\n   * Step the physics world forward in time.\r\n   *\r\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\r\n   *\r\n   * @method step\r\n   * @param {Number} dt                       The fixed time step size to use.\r\n   * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\r\n   * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\r\n   *\r\n   * @example\r\n   *     // fixed timestepping without interpolation\r\n   *     world.step(1/60);\r\n   *\r\n   * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\r\n   */\n\n\n  step(dt, timeSinceLastCalled, maxSubSteps = 10) {\n    if (timeSinceLastCalled === undefined) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      const t0 = performance.now();\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n\n        if (performance.now() - t0 > dt * 2 * 1000) {\n          // The framerate is not interactive anymore.\n          // We are at half of the target framerate.\n          // Better bail out.\n          break;\n        }\n      } // Remove the excess accumulator, since we may not\n      // have had enough substeps available to catch up\n\n\n      this.accumulator = this.accumulator % dt;\n      const t = this.accumulator / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.numObjects();\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    const gnorm = gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      let mu = cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          mu = bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Invoke pre-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.preStep) {\n        bi.preStep.call(bi);\n      }\n    } // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update world time\n\n\n    this.time += dt;\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Invoke post-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const postStep = bi.postStep;\n\n      if (postStep) {\n        postStep.call(bi);\n      }\n    } // Sleeping update\n\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n  /**\r\n   * Sets all body forces in the world to zero.\r\n   * @method clearForces\r\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const force = b.force;\n      const tau = b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nconst tmpAABB1 = new AABB();\nconst tmpRay$1 = new Ray(); // performance.now() fallback on Date.now()\n\nconst performance = globalThis.performance || {};\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = [];\n\nWorld.prototype.emitContactEvents = (() => {\n  const additions = [];\n  const removals = [];\n  const beginContactEvent = {\n    type: 'beginContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const endContactEvent = {\n    type: 'endContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const beginShapeContactEvent = {\n    type: 'beginShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  const endShapeContactEvent = {\n    type: 'endShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  return function () {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        beginShapeContactEvent.bodyA = shapeA.body;\n        beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        endShapeContactEvent.bodyA = shapeA.body;\n        endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  };\n})();\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, World };\n","import {\n  World,\n  NaiveBroadphase,\n  SAPBroadphase,\n  Body,\n  Plane,\n  Box,\n  Vec3,\n  ConvexPolyhedron,\n  Cylinder,\n  Heightfield,\n  Particle,\n  Sphere,\n  Trimesh,\n  PointToPointConstraint,\n  ConeTwistConstraint,\n  HingeConstraint,\n  DistanceConstraint,\n  LockConstraint,\n  Constraint,\n  Spring,\n  Material,\n  Quaternion,\n  Ray,\n  RaycastResult,\n  RaycastVehicle,\n} from 'cannon-es'\n\nlet bodies = {}\nconst vehicles = {}\nconst springs = {}\nconst rays = {}\nconst world = new World()\nconst config = { step: 1 / 60 }\nconst subscriptions = {}\nconst tempVector = new Vec3()\n\nfunction createShape(type, args) {\n  switch (type) {\n    case 'Box':\n      return new Box(new Vec3(...args.map((v) => v / 2))) // extents => halfExtents\n    case 'ConvexPolyhedron':\n      const [v, f, n] = args\n      return new ConvexPolyhedron({\n        vertices: v.map(([x, y, z]) => new Vec3(x, y, z)),\n        normals: n ? n.map(([x, y, z]) => new Vec3(x, y, z)) : null,\n        faces: f,\n      })\n    case 'Cylinder':\n      return new Cylinder(...args) // [ radiusTop, radiusBottom, height, numSegments ] = args\n    case 'Heightfield':\n      return new Heightfield(...args) // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\n    case 'Particle':\n      return new Particle() // no args\n    case 'Plane':\n      return new Plane() // no args, infinite x and y\n    case 'Sphere':\n      return new Sphere(...args) // [radius] = args\n    case 'Trimesh':\n      return new Trimesh(...args) // [vertices, indices] = args\n  }\n}\n\nfunction syncBodies() {\n  self.postMessage({ op: 'sync', bodies: world.bodies.map((body) => body.uuid) })\n  bodies = world.bodies.reduce((acc, body) => ({ ...acc, [body.uuid]: body }), {})\n}\n\nself.onmessage = (e) => {\n  const { op, uuid, type, positions, quaternions, props } = e.data\n\n  switch (op) {\n    case 'init': {\n      const {\n        gravity,\n        tolerance,\n        step,\n        iterations,\n        allowSleep,\n        broadphase,\n        axisIndex,\n        defaultContactMaterial,\n      } = props\n      const broadphases = { NaiveBroadphase, SAPBroadphase }\n      world.allowSleep = allowSleep\n      world.gravity.set(gravity[0], gravity[1], gravity[2])\n      world.solver.tolerance = tolerance\n      world.solver.iterations = iterations\n      world.broadphase = new (broadphases[broadphase + 'Broadphase'] || NaiveBroadphase)(world)\n      world.broadphase.axisIndex = axisIndex ?? 0\n      Object.assign(world.defaultContactMaterial, defaultContactMaterial)\n      config.step = step\n      break\n    }\n    case 'step': {\n      world.step(config.step)\n      const numberOfBodies = world.bodies.length\n      for (let i = 0; i < numberOfBodies; i++) {\n        let b = world.bodies[i],\n          p = b.position,\n          q = b.quaternion\n        positions[3 * i + 0] = p.x\n        positions[3 * i + 1] = p.y\n        positions[3 * i + 2] = p.z\n        quaternions[4 * i + 0] = q.x\n        quaternions[4 * i + 1] = q.y\n        quaternions[4 * i + 2] = q.z\n        quaternions[4 * i + 3] = q.w\n      }\n      const observations = []\n      for (const id of Object.keys(subscriptions)) {\n        const [uuid, type] = subscriptions[id]\n        let value = bodies[uuid][type]\n        if (value instanceof Vec3) value = value.toArray()\n        else if (value instanceof Quaternion) {\n          value.toEuler(tempVector)\n          value = tempVector.toArray()\n        }\n        observations.push([id, value])\n      }\n      self.postMessage(\n        {\n          op: 'frame',\n          positions,\n          quaternions,\n          observations,\n          active: world.hasActiveBodies,\n        },\n        [positions.buffer, quaternions.buffer]\n      )\n      break\n    }\n    case 'addBodies': {\n      for (let i = 0; i < uuid.length; i++) {\n        const {\n          args = [],\n          position = [0, 0, 0],\n          rotation = [0, 0, 0],\n          scale = [1, 1, 1],\n          velocity = [0, 0, 0],\n          angularVelocity = [0, 0, 0],\n          linearFactor = [1, 1, 1],\n          angularFactor = [1, 1, 1],\n          type: bodyType,\n          mass,\n          material,\n          shapes,\n          onCollide,\n          ...extra\n        } = props[i]\n\n        const body = new Body({\n          ...extra,\n          mass: bodyType === 'Static' ? 0 : mass,\n          type: bodyType ? Body[bodyType.toUpperCase()] : undefined,\n          material: material ? new Material(material) : undefined,\n        })\n        body.uuid = uuid[i]\n\n        if (type === 'Compound') {\n          shapes.forEach(({ type, args, position, rotation, material, ...extra }) => {\n            const shapeBody = body.addShape(\n              createShape(type, args),\n              position ? new Vec3(...position) : undefined,\n              rotation ? new Quaternion().setFromEuler(...rotation) : undefined\n            )\n            if (material) shapeBody.material = new Material(material)\n            Object.assign(shapeBody, extra)\n          })\n        } else {\n          body.addShape(createShape(type, args))\n        }\n\n        body.position.set(position[0], position[1], position[2])\n        body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2])\n        body.velocity.set(velocity[0], velocity[1], velocity[2])\n        body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2])\n        body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2])\n        body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2])\n        world.addBody(body)\n\n        if (onCollide)\n          body.addEventListener('collide', ({ type, body, target, contact }) => {\n            const { ni, ri, rj } = contact\n            self.postMessage({\n              op: 'event',\n              type,\n              body: body.uuid,\n              target: target.uuid,\n              contact: {\n                ni: ni.toArray(),\n                ri: ri.toArray(),\n                rj: rj.toArray(),\n                impactVelocity: contact.getImpactVelocityAlongNormal(),\n              },\n              collisionFilters: {\n                bodyFilterGroup: body.collisionFilterGroup,\n                bodyFilterMask: body.collisionFilterMask,\n                targetFilterGroup: target.collisionFilterGroup,\n                targetFilterMask: target.collisionFilterMask,\n              },\n            })\n          })\n      }\n      syncBodies()\n      break\n    }\n    case 'removeBodies': {\n      for (let i = 0; i < uuid.length; i++) world.removeBody(bodies[uuid[i]])\n      syncBodies()\n      break\n    }\n    case 'subscribe': {\n      const { id, type } = props\n      subscriptions[id] = [uuid, type]\n      break\n    }\n    case 'unsubscribe': {\n      delete subscriptions[props]\n      break\n    }\n    case 'setPosition':\n      bodies[uuid].position.set(props[0], props[1], props[2])\n      break\n    case 'setQuaternion':\n      bodies[uuid].quaternion.setFromEuler(props[0], props[1], props[2])\n      break\n    case 'setVelocity':\n      bodies[uuid].velocity.set(props[0], props[1], props[2])\n      break\n    case 'setAngularVelocity':\n      bodies[uuid].angularVelocity.set(props[0], props[1], props[2])\n      break\n    case 'setLinearFactor':\n      bodies[uuid].linearFactor.set(props[0], props[1], props[2])\n      break\n    case 'setAngularFactor':\n      bodies[uuid].angularFactor.set(props[0], props[1], props[2])\n      break\n    case 'setMass':\n      bodies[uuid].mass = props\n      break\n    case 'setLinearDamping':\n      bodies[uuid].linearDamping = props\n      break\n    case 'setAngularDamping':\n      bodies[uuid].angularDamping = props\n      break\n    case 'setAllowSleep':\n      bodies[uuid].allowSleep = props\n      break\n    case 'setSleepSpeedLimit':\n      bodies[uuid].sleepSpeedLimit = props\n      break\n    case 'setSleepTimeLimit':\n      bodies[uuid].sleepTimeLimit = props\n      break\n    case 'setCollisionFilterGroup':\n      bodies[uuid].collisionFilterGroup = props\n      break\n    case 'setCollisionFilterMask':\n      bodies[uuid].collisionFilterMask = props\n      break\n    case 'setCollisionFilterMask':\n      bodies[uuid].collisionFilterMask = props\n      break\n    case 'setFixedRotation':\n      bodies[uuid].fixedRotation = props\n      break\n    case 'applyForce':\n      bodies[uuid].applyForce(new Vec3(...props[0]), new Vec3(...props[1]))\n      break\n    case 'applyImpulse':\n      bodies[uuid].applyImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\n      break\n    case 'applyLocalForce':\n      bodies[uuid].applyLocalForce(new Vec3(...props[0]), new Vec3(...props[1]))\n      break\n    case 'applyLocalImpulse':\n      bodies[uuid].applyLocalImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\n      break\n    case 'addConstraint': {\n      const [bodyA, bodyB, optns] = props\n      let { pivotA, pivotB, axisA, axisB, ...options } = optns\n\n      // is there a better way to enforce defaults?\n      pivotA = Array.isArray(pivotA) ? new Vec3(...pivotA) : undefined\n      pivotB = Array.isArray(pivotB) ? new Vec3(...pivotB) : undefined\n      axisA = Array.isArray(axisA) ? new Vec3(...axisA) : undefined\n      axisB = Array.isArray(axisB) ? new Vec3(...axisB) : undefined\n\n      let constraint\n\n      switch (type) {\n        case 'PointToPoint':\n          constraint = new PointToPointConstraint(\n            bodies[bodyA],\n            pivotA,\n            bodies[bodyB],\n            pivotB,\n            optns.maxForce\n          )\n          break\n        case 'ConeTwist':\n          constraint = new ConeTwistConstraint(bodies[bodyA], bodies[bodyB], {\n            pivotA,\n            pivotB,\n            axisA,\n            axisB,\n            ...options,\n          })\n          break\n        case 'Hinge':\n          constraint = new HingeConstraint(bodies[bodyA], bodies[bodyB], {\n            pivotA,\n            pivotB,\n            axisA,\n            axisB,\n            ...options,\n          })\n          break\n        case 'Distance':\n          constraint = new DistanceConstraint(bodies[bodyA], bodies[bodyB], optns.distance, optns.maxForce)\n          break\n        case 'Lock':\n          constraint = new LockConstraint(bodies[bodyA], bodies[bodyB], optns)\n          break\n        default:\n          constraint = new Constraint(bodies[bodyA], bodies[bodyB], optns)\n          break\n      }\n      constraint.uuid = uuid\n      world.addConstraint(constraint)\n      break\n    }\n    case 'removeConstraint':\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => world.removeConstraint(c))\n      break\n\n    case 'enableConstraint':\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.enable())\n      break\n\n    case 'disableConstraint':\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.disable())\n      break\n\n    case 'addSpring': {\n      const [bodyA, bodyB, optns] = props\n      let { worldAnchorA, worldAnchorB, localAnchorA, localAnchorB, restLength, stiffness, damping } = optns\n\n      worldAnchorA = Array.isArray(worldAnchorA) ? new Vec3(...worldAnchorA) : undefined\n      worldAnchorB = Array.isArray(worldAnchorB) ? new Vec3(...worldAnchorB) : undefined\n      localAnchorA = Array.isArray(localAnchorA) ? new Vec3(...localAnchorA) : undefined\n      localAnchorB = Array.isArray(localAnchorB) ? new Vec3(...localAnchorB) : undefined\n\n      let spring = new Spring(bodies[bodyA], bodies[bodyB], {\n        worldAnchorA,\n        worldAnchorB,\n        localAnchorA,\n        localAnchorB,\n        restLength,\n        stiffness,\n        damping,\n      })\n\n      spring.uuid = uuid\n\n      let postStepSpring = (e) => spring.applyForce()\n\n      springs[uuid] = postStepSpring\n\n      // Compute the force after each step\n      world.addEventListener('postStep', springs[uuid])\n      break\n    }\n    case 'removeSpring': {\n      world.removeEventListener('postStep', springs[uuid])\n      break\n    }\n    case 'addRay': {\n      const { from, to, ...options } = props\n      const ray = new Ray(from ? new Vec3(...from) : undefined, to ? new Vec3(...to) : undefined)\n      options.mode = Ray[options.mode.toUpperCase()]\n      options.result = new RaycastResult()\n      rays[uuid] = () => {\n        ray.intersectWorld(world, options)\n        const {\n          body,\n          shape,\n          rayFromWorld,\n          rayToWorld,\n          hitNormalWorld,\n          hitPointWorld,\n          ...rest\n        } = options.result\n        self.postMessage({\n          op: 'event',\n          type: 'rayhit',\n          ray: {\n            from,\n            to,\n            direction: ray.direction.toArray(),\n            collisionFilterGroup: ray.collisionFilterGroup,\n            collisionFilterMask: ray.collisionFilterMask,\n            uuid,\n          },\n          body: body ? body.uuid : null,\n          shape: shape ? { ...shape, body: body.uuid } : null,\n          rayFromWorld: rayFromWorld.toArray(),\n          rayToWorld: rayToWorld.toArray(),\n          hitNormalWorld: hitNormalWorld.toArray(),\n          hitPointWorld: hitPointWorld.toArray(),\n          ...rest,\n        })\n      }\n      world.addEventListener('preStep', rays[uuid])\n      break\n    }\n    case 'removeRay': {\n      world.removeEventListener('preStep', rays[uuid])\n      delete rays[uuid]\n      break\n    }\n    case 'addRaycastVehicle': {\n      const [chassisBody, wheels, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis] = props\n      const vehicle = new RaycastVehicle({\n        chassisBody: bodies[chassisBody],\n        indexForwardAxis: indexForwardAxis,\n        indexRightAxis: indexRightAxis,\n        indexUpAxis: indexUpAxis,\n      })\n      vehicle.world = world\n      for (let i = 0; i < wheelInfos.length; i++) {\n        const wheelInfo = wheelInfos[i]\n        wheelInfo.directionLocal = new Vec3(...wheelInfo.directionLocal)\n        wheelInfo.chassisConnectionPointLocal = new Vec3(...wheelInfo.chassisConnectionPointLocal)\n        wheelInfo.axleLocal = new Vec3(...wheelInfo.axleLocal)\n        vehicle.addWheel(wheelInfo)\n        const wheelBody = bodies[wheels[i]]\n      }\n      vehicles[uuid] = {\n        vehicle: vehicle,\n        wheels: wheels,\n        preStep: () => {\n          vehicles[uuid].vehicle.updateVehicle(world.dt)\n        },\n        postStep: () => {\n          for (let i = 0; i < vehicles[uuid].vehicle.wheelInfos.length; i++) {\n            vehicles[uuid].vehicle.updateWheelTransform(i)\n            const t = vehicles[uuid].vehicle.wheelInfos[i].worldTransform\n            const wheelBody = bodies[vehicles[uuid].wheels[i]]\n            wheelBody.position.copy(t.position)\n            wheelBody.quaternion.copy(t.quaternion)\n          }\n        },\n      }\n      world.addEventListener('preStep', vehicles[uuid].preStep)\n      world.addEventListener('postStep', vehicles[uuid].postStep)\n      break\n    }\n    case 'removeRaycastVehicle': {\n      world.removeEventListener('preStep', vehicles[uuid].preStep)\n      world.removeEventListener('postStep', vehicles[uuid].postStep)\n      vehicles[uuid].vehicle.world = null\n      vehicles[uuid].vehicle = null\n      delete vehicles[uuid]\n      break\n    }\n    case 'setRaycastVehicleSteeringValue': {\n      const [value, wheelIndex] = props\n      vehicles[uuid].vehicle.setSteeringValue(value, wheelIndex)\n      break\n    }\n    case 'applyRaycastVehicleEngineForce': {\n      const [value, wheelIndex] = props\n      vehicles[uuid].vehicle.applyEngineForce(value, wheelIndex)\n      break\n    }\n    case 'setRaycastVehicleBrake': {\n      const [brake, wheelIndex] = props\n      vehicles[uuid].vehicle.setBrake(brake, wheelIndex)\n      break\n    }\n  }\n}\n"],"names":["Mat3","constructor","elements","identity","e","this","setZero","setTrace","vector","x","y","z","getTrace","target","Vec3","vmult","v","smult","s","i","length","mmult","matrix","j","sum","k","scale","t","solve","b","eqns","nr","push","n","np","p","multiplier","isNaN","Infinity","toString","row","column","value","undefined","copy","r","reverse","setRotationFromQuaternion","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","cross","vx","vy","vz","set","vadd","vsub","crossmat","normalize","Math","sqrt","invN","unit","ninv","lengthSquared","dot","distanceTo","px","py","pz","distanceSquared","scalar","vmul","addScaledVector","isZero","negate","tangents","t1","t2","norm","Vec3_tangents_n","inorm","randVec","Vec3_tangents_randVec","abs","toArray","lerp","almostEquals","precision","almostZero","isAntiparallelTo","antip_neg","clone","ZERO","UNIT_X","UNIT_Y","UNIT_Z","AABB","options","lowerBound","upperBound","setFromPoints","points","position","quaternion","skinSize","l","u","tmp","aabb","extend","min","max","overlaps","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","volume","contains","getCorners","a","c","d","f","g","h","toLocalFrame","frame","corners","transformIntoFrame_corners","corner","pointToLocal","toWorldFrame","pointToWorld","overlapsRay","ray","direction","from","dirFracX","dirFracY","dirFracZ","t3","t4","t5","t6","tmin","tmax","ArrayCollisionMatrix","get","bi","bj","index","temp","reset","setNumObjects","EventTarget","addEventListener","type","listener","_listeners","listeners","includes","hasEventListener","hasAnyEventListener","removeEventListener","indexOf","splice","dispatchEvent","event","listenerArray","call","Quaternion","setFromAxisAngle","angle","sin","cos","toAxisAngle","targetAxis","acos","setFromVectors","sfv_t1","sfv_t2","PI","mult","quat","ax","ay","az","aw","bx","by","bz","bw","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c2","c3","s1","s2","s3","slerp","toQuat","omega","cosom","sinom","scale0","scale1","integrate","angularVelocity","dt","angularFactor","half_dt","Shape","id","idCounter","boundingSphereRadius","collisionResponse","collisionFilterGroup","collisionFilterMask","material","body","updateBoundingSphereRadius","calculateLocalInertia","mass","calculateWorldAABB","pos","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","Transform","worldPoint","result","pointToLocalFrame","localPoint","pointToWorldFrame","vectorToWorldFrame","localVector","tmpQuat","worldVector","ConvexPolyhedron","props","vertices","faces","normals","axes","faceNormals","computeNormals","worldVertices","worldVerticesNeedsUpdate","worldFaceNormals","worldFaceNormalsNeedsUpdate","uniqueAxes","slice","uniqueEdges","computeEdges","edges","edge","face","numVertices","found","getFaceNormal","vertex","console","error","warn","va","vb","vc","computeNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","Number","MAX_VALUE","worldVertsB1","worldb","clipFaceAgainstHull","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","testSepAxis","numFacesA","fi","numFacesB","e0","e1","dist","axis","project","maxminA","maxminB","maxA","minA","maxB","minB","d0","d1","aabbmax","aabbmin","computeLocalAABB","getPlaneConstantOfFace","face_i","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","planeEqWS","clipFaceAgainstPlane","shift","depth","log","point","normal","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","computeWorldVertices","verts","worldVerts","computeWorldFaceNormals","N","worldNormals","max2","norm2","minx","miny","minz","maxx","maxy","maxz","tempWorldVertex","getAveragePointLocal","transformAllPoints","offset","pointIsInside","pointInside","vToP","r1","vToPointInside","r2","cb","ab","shape","localAxis","localOrigin","vs","vectorToLocalFrame","add","val","Box","halfExtents","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateInertia","getSideNormals","sixTargetVectors","sides","ex","forEachWorldCorner","callback","worldCornerTempPos","worldCornersTemp","wc","BODY_SLEEP_STATES","Body","world","preStep","postStep","vlambda","previousPosition","interpolatedPosition","initPosition","velocity","initVelocity","force","invMass","linearDamping","STATIC","DYNAMIC","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","wakeUpAfterNarrowphase","torque","initQuaternion","previousQuaternion","interpolatedQuaternion","initAngularVelocity","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","angularDamping","linearFactor","aabbNeedsUpdate","boundingRadius","wlambda","addShape","updateMassProperties","wakeUp","prevState","SLEEPING","wakeupEvent","sleep","sleepTick","time","speedSquared","speedLimitSquared","AWAKE","SLEEPY","sleepyEvent","sleepEvent","updateSolveMassProperties","KINEMATIC","_offset","_orientation","orientation","updateBoundingRadius","radius","computeAABB","tmpVec","tmpQuat$1","bodyQuat","shapeAABB","computeAABB_shapeAABB","updateInertiaWorld","I","m1","uiw_m1","m2","uiw_m2","applyForce","relativePoint","rotForce","Body_applyForce_rotForce","applyLocalForce","localForce","worldForce","Body_applyLocalForce_worldForce","relativePointWorld","Body_applyLocalForce_relativePointWorld","applyImpulse","impulse","velo","Body_applyImpulse_velo","rotVelo","Body_applyImpulse_rotVelo","applyLocalImpulse","localImpulse","worldImpulse","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_relativePoint","Body_updateMassProperties_halfExtents","fixed","getVelocityAtWorldPoint","quatNormalize","quatNormalizeFast","angularVelo","iMdt","tx","ty","tz","COLLIDE_EVENT_NAME","Broadphase","useBoundingBoxes","dirty","collisionPairs","p1","p2","needBroadphaseCollision","bodyA","bodyB","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","makePairsUnique","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","id1","id2","key","keys","pop","pairIndex","setWorld","aabbQuery","boundingSphereCheck","sa","sb","pow","NaiveBroadphase","bodies","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","hitFaceIndex","distance","shouldStop","abort","Ray","to","checkCollisionResponse","skipBackfaces","mode","ANY","intersectWorld","updateDirection","getAABB","tmpAABB","tmpArray","broadphase","intersectBodies","intersectBody","xi","intersectBody_xi","qi","intersectBody_qi","intersectShape","v0","intersect","distanceFromIntersection","intersectMethod","_intersectBox","box","reportedShape","_intersectConvex","_intersectPlane","worldNormal","len","planeToFrom","n_dot_dir","planePointToFrom","dir_scaled_with_t","reportIntersection","_intersectHeightfield","data","elementSize","localRay","intersectHeightfield_localRay","intersectHeightfield_index","iMinX","iMinY","iMaxX","iMaxY","getIndexOfPosition","getAabbAtIndex","getConvexTrianglePillar","pillarOffset","worldPillarOffset","pillarConvex","intersectConvexOptions","_intersectSphere","sphere","delta","intersectionPoint","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","d2","intersectConvex_normal","intersectConvex_vector","faceList","fromToDistance","Nfaces","faceNormal","intersectPoint","pointInTriangle","_intersectTrimesh","mesh","intersectTrimesh_normal","triangles","intersectTrimesh_triangles","treeTransform","intersectTrimesh_treeTransform","localDirection","intersectTrimesh_localDirection","localFrom","intersectTrimesh_localFrom","localTo","intersectTrimesh_localTo","worldIntersectPoint","intersectTrimesh_worldIntersectPoint","intersectTrimesh_worldNormal","indices","fromToDistanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","ALL","CLOSEST","v1","v2","dot00","dot01","dot02","dot11","dot12","prototype","SAPBroadphase","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","idx","sortList","checkBounds","insertionSortX","insertionSortY","insertionSortZ","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","Utils","biPos","bjPos","ri","defaults","Constraint","collideConnected","wakeUpBodies","equations","update","enable","eqs","enabled","disable","JacobianElement","spatial","rotational","multiplyElement","element","multiplyVectors","Equation","minForce","maxForce","eps","jacobianElementA","jacobianElementB","setSpookParams","stiffness","relaxation","timeStep","computeB","GW","computeGW","computeGq","computeGiMf","GA","GB","xj","vj","wi","wj","computeGWlambda","ti","fj","tj","invMassi","invMassj","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","computeGiMGt","invIi","invIj","tmp$1","addToWlambda","deltalambda","addToWlambda_temp","computeC","ContactEquation","restitution","rj","ni","rixn","ContactEquation_computeB_temp1","rjxn","ContactEquation_computeB_temp2","penetrationVec","ContactEquation_computeB_temp3","ePlusOne","getImpactVelocityAlongNormal","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","relVel","ContactEquation_getImpactVelocityAlongNormal_relVel","PointToPointConstraint","pivotA","pivotB","equationX","equationY","equationZ","ConeEquation","axisA","axisB","nj","nixnj","tmpVec1","njxni","tmpVec2","RotationalEquation","maxAngle","tmpVec1$1","tmpVec2$1","ConeTwistConstraint","coneEquation","twistEquation","twistAngle","cone","twist","DistanceConstraint","eq","distanceEquation","halfDist","LockConstraint","halfWay","xA","xB","yA","yB","zA","zB","rotationalEquation1","rotationalEquation2","r3","rotationalEquation3","motorEquation","RotationalMotorEquation","targetVelocity","HingeConstraint","rotational1","rotational2","motor","enableMotor","disableMotor","setMotorSpeed","speed","setMotorMaxForce","worldAxisA","HingeConstraint_update_tmpVec1","worldAxisB","HingeConstraint_update_tmpVec2","FrictionEquation","slipForce","rixt","FrictionEquation_computeB_temp1","rjxt","FrictionEquation_computeB_temp2","ContactMaterial","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","Material","name","Spring","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","r_unit","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_tmp","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","ri_x_f","applyForce_ri_x_f","rj_x_f","applyForce_rj_x_f","rlen","WheelInfo","chassisConnectionPointLocal","chassisConnectionPointWorld","directionLocal","directionWorld","axleLocal","axleWorld","suspensionRestLength","suspensionMaxLength","suspensionStiffness","dampingCompression","dampingRelaxation","frictionSlip","steering","rotation","deltaRotation","rollInfluence","maxSuspensionForce","isFrontWheel","clippedInvContactDotSuspension","suspensionRelativeVelocity","suspensionForce","slipInfo","skidInfo","suspensionLength","maxSuspensionTravel","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","sliding","engineForce","brake","sideImpulse","forwardImpulse","raycastResult","worldTransform","isInContact","updateWheel","chassis","relpos","chassis_velocity_at_contactPoint","projVel","inv","RaycastVehicle","chassisBody","wheelInfos","indexRightAxis","indexForwardAxis","indexUpAxis","constraints","preStepCallback","currentVehicleSpeedKmHour","addWheel","info","setSteeringValue","wheelIndex","applyEngineForce","setBrake","addToWorld","addBody","that","updateVehicle","getVehicleAxisWorld","numWheels","updateWheelTransform","forwardWorld","castRay","updateSuspension","wheel","updateFriction","hitNormalWorldScaledWithProj","fwd","vel","m","proj","proj2","deltaTime","chassisMass","w_it","length_diff","projected_rel_vel","susp_damping","removeFromWorld","removeBody","rayvector","castRay_rayvector","castRay_target","updateWheelTransformWorld","raylen","source","oldState","rayTest","object","groundObject","hitDistance","minSuspensionLength","maxSuspensionLength","denominator","up","tmpVec4","right","tmpVec5","tmpVec6","steeringOrn","rotatingOrn","getWheelTransformWorld","surfNormalWS_scaled_proj","updateFriction_surfNormalWS_scaled_proj","forwardWS","updateFriction_forwardWS","axle","updateFriction_axle","axlei","directions","surfNormalWS","resolveSingleBilateral","sideFrictionStiffness2","rollingFriction","defaultRollingFrictionImpulse","maxImpulse","calcRollingFriction","factor","maximp","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","calcRollingFriction_vel1","calcRollingFriction_vel2","calcRollingFriction_vel","body0","body1","frictionPosWorld","frictionDirectionWorld","j1","contactPosWorld","vel1","vel2","computeImpulseDenominator","computeImpulseDenominator_r0","computeImpulseDenominator_c0","computeImpulseDenominator_vec","computeImpulseDenominator_m","r0","c0","vec","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","pos1","body2","pos2","Sphere","Cylinder","radiusTop","radiusBottom","height","numSegments","bottomface","topface","theta","thetaN","Particle","Plane","worldNormalNeedsUpdate","computeWorldNormal","tempNormal","maxVal","Heightfield","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","yi","clearCachedConvexTrianglePillar","getRectMinMax","clamp","floor","getTriangleAt","edgeClamp","getHeightAt_idx","upper","getTriangle","getNormalAt","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","getHeightAt","getHeightAt_a","getHeightAt_b","getHeightAt_c","cx","cy","barycentricWeights","getHeightAt_weights","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","setHeightsFromImage","image","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","unshift","OctreeNode","root","children","insert","elementData","level","nodeData","maxDepth","subdivided","subdivide","halfDiagonal","child","queue","node","Array","apply","tmpAABB$1","removeEmptyNodes","Octree","Trimesh","Float32Array","Int16Array","updateEdges","updateNormals","updateAABB","updateTree","triangleAABB","i3","_getUnscaledVertex","getTrianglesInAABB","unscaledAABB","isx","isy","isz","setScale","wasUniform","isUniform","computeNormals_n","Object","split","parseInt","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector","vectorStore","getEdgeVector_va","getEdgeVector_vb","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","tube","radialSegments","tubularSegments","arc","GSSolver","addEquation","removeEquation","removeAllEquations","iterations","tolerance","iter","maxIter","tolSquared","Neq","Nbodies","B","invC","deltalambdaTot","GWlambda","lambdaj","invCs","GSSolver_solve_invCs","Bs","GSSolver_solve_Bs","lambda","GSSolver_solve_lambda","invDt","Vec3Pool","objects","release","args","Nargs","constructObject","resize","size","COLLISION_TYPES","Narrowphase","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","defaultContactMaterial","enableFrictionReduction","createContactEquation","si","sj","overrideShapeA","overrideShapeB","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","createFrictionFromAverage","numContacts","f1","f2","averageNormal","averageContactPointA","averageContactPointB","invNumContacts","getContacts","oldcontacts","frictionPool","tmpQuat1","qj","tmpQuat2","tmpVec1$2","tmpVec2$2","bodyContactMaterial","getContactMaterial","justTest","shapeContactMaterial","resolver","retval","shapeOverlapKeeper","bodyOverlapKeeper","sphereSphere","rsi","rsj","spherePlane","point_on_plane_to_sphere","plane_to_sphere_ortho","boxBox","convexConvex","sphereBox","sphereBox_sides","box_to_sphere","R","side_ns","sphereBox_side_ns","side_ns1","sphereBox_side_ns1","side_ns2","sphereBox_side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","sphereBox_ns","ns1","sphereBox_ns1","ns2","sphereBox_ns2","h1","h2","dot1","dot2","sphere_to_corner","sphereBox_sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","planeBox","planeConvex","sepAxis","convexConvex_sepAxis","convexConvex_q","sphereConvex","convex_to_sphere","worldCorner","sphereConvex_worldCorner","sphereConvex_sphereToCorner","nfaces","sphereConvex_worldNormal","sphereConvex_worldPoint","worldSpherePointClosestToPlane","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","penetration","worldPointToSphere","sphereConvex_sphereToWorldPoint","faceVerts","Nverts","worldVertex","pointInPolygon","penetrationVec2","penetrationSpherePoint","Nfaceverts","sphereConvex_edge","edgeUnit","sphereConvex_edgeUnit","v1_to_xi","xi_to_p","planeShape","convexShape","planePosition","convexPosition","planeQuat","convexQuat","planeBody","convexBody","planeConvex_v","planeConvex_normal","planeConvex_relpos","projected","planeConvex_projected","boxConvex","sphereHeightfield","sphereShape","hfShape","spherePos","hfPos","sphereQuat","hfQuat","sphereBody","hfBody","sphereHeightfield_tmp2","localSpherePos","sphereHeightfield_tmp1","ceil","minMax","numContactsBefore","intersecting","boxHeightfield","convexHeightfield","convexPos","convexHeightfield_tmp2","convexHeightfield_faceList","localConvexPos","convexHeightfield_tmp1","sphereParticle","particleSphere_normal","planeParticle","particlePlane_normal","particlePlane_relpos","particlePlane_projected","boxParticle","convexParticle","penetratedFaceIndex","penetratedFaceNormal","convexParticle_penetratedFaceNormal","worldPenetrationVec","convexParticle_worldPenetrationVec","minPenetration","local","convexParticle_local","cqj","convexParticle_vertexToParticle","sphereTrimesh","trimeshShape","trimeshPos","trimeshQuat","trimeshBody","edgeVertexA","sphereTrimesh_edgeVertexA","edgeVertexB","sphereTrimesh_edgeVertexB","edgeVector","sphereTrimesh_edgeVector","edgeVectorUnit","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","localSphereAABB","sphereTrimesh_localSphereAABB","sphereTrimesh_v2","sphereTrimesh_relpos","sphereTrimesh_triangles","sphereRadius","sphereTrimesh_v","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_normal","planeTrimesh","planePos","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","positiveResult","edge_x_normal","vertex_to_p","OverlapKeeper","current","previous","getKey","tick","getDiff","additions","removals","al","bl","keyA","unpackAndPush","keyB","array","TupleDictionary","World","contacts","frictionEquations","quatNormalizeSkip","stepnumber","default_dt","nextId","hasActiveBodies","solver","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","accumulator","subsystems","addBodyEvent","removeBodyEvent","idToBodyMap","numObjects","collisionMatrixTick","addConstraint","removeConstraint","raycastClosest","raycastAll","tmpRay$1","raycastAny","getBodyById","getShapeById","sl","addMaterial","addContactMaterial","cmat","step","timeSinceLastCalled","maxSubSteps","internalStep","t0","performance","now","substeps","World_step_p1","World_step_p2","profilingStart","World_step_frictionEquationPool","gx","gy","gz","Nsubsystems","Nconstraints","World_step_oldContacts","NoldContacts","NoldFrictionEquations","ncontacts","mu","World_step_collideEvent","contact","emitContactEvents","ld","av","ad","World_step_preStepEvent","clearForces","World_step_postStepEvent","globalThis","nowOffset","Date","timing","navigationStart","beginContactEvent","endContactEvent","beginShapeContactEvent","endShapeContactEvent","hasBeginContact","hasEndContact","hasBeginShapeContact","hasEndShapeContact","vehicles","springs","rays","config","subscriptions","tempVector","createShape","map","syncBodies","self","postMessage","op","uuid","reduce","acc","onmessage","positions","quaternions","broadphases","assign","numberOfBodies","observations","active","buffer","bodyType","onCollide","extra","toUpperCase","forEach","shapeBody","impactVelocity","collisionFilters","bodyFilterGroup","bodyFilterMask","targetFilterGroup","targetFilterMask","optns","constraint","isArray","filter","thisId","spring","postStepSpring","rest","wheels","vehicle","wheelInfo","wheelBody"],"mappings":"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"}'),
    (V = !1),
    function (I) {
      return (d = d || U(c, l, V)), new Worker(d, I)
    })
export default function ({
  children: U,
  step: c = 1 / 60,
  gravity: l = [0, -10, 0],
  tolerance: V = 0.001,
  iterations: d = 5,
  allowSleep: x = !1,
  broadphase: X = 'Naive',
  axisIndex: R = 0,
  defaultContactMaterial: L = { contactEquationStiffness: 1e6 },
  size: W = 1e3,
}) {
  const { invalidate: A } = C(),
    [s] = B(() => new Z()),
    [y] = B({}),
    [m] = B(() => ({ positions: new Float32Array(3 * W), quaternions: new Float32Array(4 * W) })),
    [u] = B({}),
    [S] = B({}),
    i = F({})
  g(() => {
    function I() {
      s.postMessage(G({ op: 'step' }, m), [m.positions.buffer, m.quaternions.buffer])
    }
    return (
      s.postMessage({
        op: 'init',
        props: {
          gravity: l,
          tolerance: V,
          step: c,
          iterations: d,
          broadphase: X,
          allowSleep: x,
          axisIndex: R,
          defaultContactMaterial: L,
        },
      }),
      (s.onmessage = (B) => {
        switch (B.data.op) {
          case 'frame':
            ;(m.positions = B.data.positions),
              (m.quaternions = B.data.quaternions),
              B.data.observations.forEach(([I, B]) => S[I](B)),
              requestAnimationFrame(I),
              B.data.active && A()
            break
          case 'sync':
            i.current = B.data.bodies.reduce((I, F) => G({}, I, { [F]: B.data.bodies.indexOf(F) }), {})
            break
          case 'event':
            switch (B.data.type) {
              case 'collide':
                u[B.data.target](G({}, B.data, { target: y[B.data.target], body: y[B.data.body] }))
                break
              case 'rayhit':
                u[B.data.ray.uuid](G({}, B.data, { body: B.data.body ? y[B.data.body] : null }))
            }
        }
      }),
      I(),
      () => s.terminate()
    )
  }, [])
  const N = b(() => ({ worker: s, bodies: i, refs: y, buffers: m, events: u, subscriptions: S }), [
    s,
    i,
    y,
    m,
    u,
    S,
  ])
  return I.createElement(Q.Provider, { value: N }, U)
}
